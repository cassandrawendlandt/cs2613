#lang racket

(define (binmap op num1 num2)
  (cond
    [(> (length num1) ( length num2)) (map op (take num1 (length num2)) num2)]
    [(< (length num1) ( length num2)) (map op num1 (take num2 (length num1)))]
    [else (map op num1 num2)])
  )
  
(define (binmap2 op list1 list2)
  (define (helper lst1 lst2 acc) #|function body goes here|#)
  (reverse (helper list1 list2 '())))
(module+ test
  (require rackunit)

  (check-equal? (binmap + '(1 2 3) '(4 5 6)) '(5 7 9))
  (check-equal? (binmap * '(1 2 3) '(4 5 6)) '(4 10 18))

  (check-equal? (binmap string-append '("hello" "world ")
                                      '(" mom" "travel"))
        '("hello mom" "world travel"))

  (check-equal? (binmap + '(1 2 3) '(4 5 6 7)) '(5 7 9))
  (check-equal? (binmap + '(1 2 3 4) '(4 5 6)) '(5 7 9)))
