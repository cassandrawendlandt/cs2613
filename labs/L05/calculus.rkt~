#lang racket
(require racket/math)

(module+ test
  (require rackunit)
  (define epsilon .001))

(define dx 0.001)
(define -2pi (* -2 pi))
(define 2pi (* 2 pi))

;; compute the derivative of `f' at the given point `x'
(define (deriv f x)
  (/ (- (f (+ x dx)) (f x)) dx))

;; Integrate a function from 0 to x (using tail recursion)
(define (integrate f x)
  (define (loop y acc)
    (if (> y x)
        (* acc dx)
        (loop (+ y dx) (+ acc (f y)))))
  (loop 0 0))