((3) 0 () 8 ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-24-lab6.md" . unix) (p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-17-scribble-demo.scrbl" . unix) (p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-19-lab-5.md" . unix) (p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-24-lab62.md" . unix) (p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-17-lab4.md" . unix) (p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-12-lab3.md" . unix) (p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-10-lab2.md" . unix) (p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-05-lab1.md" . unix)) () (h ! (equal) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-24-lab62.md" . unix) f post (u . "lab62") (? . 3) 1569342579 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/lab62.html" . unix) (u . "/2019/09/lab62.html") (u . "2019-09-24T13:29:24") (? . 0) #f () (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>") #t (u . "\n<p><em>Replace this with your post text. Add one or more comma-separated Tags above. The special tag <code>DRAFT</code> will prevent the post from being published.</em></p>\n<!-- more-->")) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-19-lab-5.md" . unix) f post (u . "Lab 5") (? . 2) 1568913418 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/lab-5.html" . unix) (u . "/2019/09/lab-5.html") (u . "2019-09-19T13:09:42") (? . 1) (? . 0) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Trail Recursion</h3>\n\n<p>Trail recursion<a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._tail-recursion%29\">Trail recursion</a> was an interesting concept to look at. At the beginning it was a little changeling to understand the question that was being asked. after looking at the trail recursion document and reading it through a few times it seemed to make more sense and the question became a lot easier to answer. The example on the document was really helpful for part 1 of the lab.</p>\n\n<h3>For Loops</h3>\n\n<p>The other new concept we looked at today was <a href=\"https://docs.racket-lang.org/guide/for.html\">for loops</a>. These were pretty easy to understand because they looked a lot like the for loops in java. Understand the different types of for loops like for/fold was a bit tricky. The documentation explained it really well.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<h3>For Loop</h3>\n\n<p>The for concept was a little familiar from Java and previous languages. Learning the syntax and different types were new tho. Having a base understanding of four loops made it a lot easier to understand them in Racket.</p>\n\n<h3>Range</h3>\n\n<p>Today in one of the code examples on the lab there was a function called range used. This was familiar to be because I used it on the assignment which I finished before the lab. Knowing range before had helped me understand what the code was doing a lot easier.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found the trail recursion very interesting today. It was interesting because it was a new concept but it also makes sense in practice. Being able to increment as you go is really helpful to know because it can help save stack on the stack trace and it makes things a lot faster to run.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab</h2>\n\n<p>First we copy the code provided in part 1 and observed how deep the stack trace went. Then we copied the code for odds-even2 and fixed the helper function to use trail recursion. Then we looked at for loop. We copied the code odds-even3 that used for loops instead of recursion. We then copied the function big-list to be able to compare the speeds between the three different functions. It turns out the odds-even2 was the fastest.  For part 4 we gained more practice working with trail recursion, for loops and higher order functions.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Trail Recursion</h3>\n\n<p>Trail recursion<a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._tail-recursion%29\">Trail recursion</a> was an interesting concept to look at. At the beginning it was a little changeling to understand the question that was being asked. after looking at the trail recursion document and reading it through a few times it seemed to make more sense and the question became a lot easier to answer. The example on the document was really helpful for part 1 of the lab.</p>\n\n<h3>For Loops</h3>\n\n<p>The other new concept we looked at today was <a href=\"https://docs.racket-lang.org/guide/for.html\">for loops</a>. These were pretty easy to understand because they looked a lot like the for loops in java. Understand the different types of for loops like for/fold was a bit tricky. The documentation explained it really well.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<h3>For Loop</h3>\n\n<p>The for concept was a little familiar from Java and previous languages. Learning the syntax and different types were new tho. Having a base understanding of four loops made it a lot easier to understand them in Racket.</p>\n\n<h3>Range</h3>\n\n<p>Today in one of the code examples on the lab there was a function called range used. This was familiar to be because I used it on the assignment which I finished before the lab. Knowing range before had helped me understand what the code was doing a lot easier.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found the trail recursion very interesting today. It was interesting because it was a new concept but it also makes sense in practice. Being able to increment as you go is really helpful to know because it can help save stack on the stack trace and it makes things a lot faster to run.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab</h2>\n\n<p>First we copy the code provided in part 1 and observed how deep the stack trace went. Then we copied the code for odds-even2 and fixed the helper function to use trail recursion. Then we looked at for loop. We copied the code odds-even3 that used for loops instead of recursion. We then copied the function big-list to be able to compare the speeds between the three different functions. It turns out the odds-even2 was the fastest.  For part 4 we gained more practice working with trail recursion, for loops and higher order functions.</p>")) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-17-lab4.md" . unix) f post (u . "Lab4") (? . 4) 1568748652 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/lab4.html" . unix) (u . "/2019/09/lab4.html") (u . "2019-09-17T10:58:26") (? . 5) (? . 1) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<p>In lab 4 we did a lot more group discussion and demonstrations than compared to the past labs.</p>\n\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab there was a few new topics that we covered. The first one is scribble and the other one is modules in Racket.</p>\n\n<h3>Scribble</h3>\n\n<p>We looked at how to create blog using scribble. It was really interesting to learn how to combine Racket into the document. Using both Racket and scribble to create a document would be a good way to help save some work. An example that was talked about in class was using it so you no longer had to copy down the copyrights to the document. The copyrights could just be stored in a function and the document then could call the function.</p>\n\n<h3>Modules</h3>\n\n<p>Modules were another interesting topic we covered today. Modules are basically another way to write functions in one file and call them from another file in the same space. This would seem really helpful because the function can be wrote once and then called from other files. Instead of continuously writing the same function in multiple programs that use.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>I was familiar with the debugger in Dr Racket before the lab. I was familiar with it because while working on my assignment I ran into errors and used the debugger to help fix them.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skilled I practised in the lab today was working with scribble. It was a little challenging to get the code to work for the first few tries but then it slowly was easier. This is a new skill because it gives me another format I could use for writing journals.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>During the lab I read through some different material that helped understand the did situations better. \n <p>First I read the <a href=\"https://docs.racket-lang.org/scribble/getting-started.html?q=%40-syntax#%28part._how-to~3areader%29\">Racket documentation</a> to gain a better understanding of the syntax used in scribble.</p> To gain a better understanding of how modules worked, I read the <a href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._module-syntax%29\">Racket module documentation</a>. The documentation was easy to follow and answered most of the questions on how to complete part 5 of the lab.</p>") #f (u . "\n<p>In lab 4 we did a lot more group discussion and demonstrations than compared to the past labs.</p>\n\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab there was a few new topics that we covered. The first one is scribble and the other one is modules in Racket.</p>\n\n<h3>Scribble</h3>\n\n<p>We looked at how to create blog using scribble. It was really interesting to learn how to combine Racket into the document. Using both Racket and scribble to create a document would be a good way to help save some work. An example that was talked about in class was using it so you no longer had to copy down the copyrights to the document. The copyrights could just be stored in a function and the document then could call the function.</p>\n\n<h3>Modules</h3>\n\n<p>Modules were another interesting topic we covered today. Modules are basically another way to write functions in one file and call them from another file in the same space. This would seem really helpful because the function can be wrote once and then called from other files. Instead of continuously writing the same function in multiple programs that use.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>I was familiar with the debugger in Dr Racket before the lab. I was familiar with it because while working on my assignment I ran into errors and used the debugger to help fix them.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skilled I practised in the lab today was working with scribble. It was a little challenging to get the code to work for the first few tries but then it slowly was easier. This is a new skill because it gives me another format I could use for writing journals.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>During the lab I read through some different material that helped understand the did situations better. \n <p>First I read the <a href=\"https://docs.racket-lang.org/scribble/getting-started.html?q=%40-syntax#%28part._how-to~3areader%29\">Racket documentation</a> to gain a better understanding of the syntax used in scribble.</p> To gain a better understanding of how modules worked, I read the <a href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._module-syntax%29\">Racket module documentation</a>. The documentation was easy to follow and answered most of the questions on how to complete part 5 of the lab.</p>")) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-05-lab1.md" . unix) f post (u . "Lab1") (? . 7) 1568153206 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/lab1.html" . unix) (u . "/2019/09/lab1.html") (u . "2019-09-05T12:00:00") #f (? . 6) (c (u . "Author: Cassandra Wendlandt")) (u . "\n<p>In the lab we started with some Linux command line review. Using the command line to make directory&rsquo;s, open a plain text editor and editing files that way were familiar concepts I learned from a previous coop. It was a good review although because I have not used those commands in a while.</p>\n\n<p>Then we moved on working with Frog. This is new concept for me to learn. It was a very interesting concept for me to learn. At first, I found it was a little confusing but after I got playing around with it and understanding the different parts within the package and the steps we had to do I found it really easy to do.</p>\n\n<p>After we moved on to getting use to git. This was a new concept for me because I have never really worked with git besides through a web browser. First we started by reading a section from pro git. This section was very helpful for to gain a better understanding of git but reading about the basics. Understanding what the different commands do and understanding what the different messages meant was a little hard but by the end of the lab I had a lot of it understood. A new skill I had a chance to practice was working with git in a command line. I am really glad I got to practice this new skill because I think it will become very helpful in the future. I also think knowing how to be able to access git from the command line is important because it makes working with it so much easier and quicker to get the information you are looking for.</p>") #f (u . "\n<p>In the lab we started with some Linux command line review. Using the command line to make directory&rsquo;s, open a plain text editor and editing files that way were familiar concepts I learned from a previous coop. It was a good review although because I have not used those commands in a while.</p>\n\n<p>Then we moved on working with Frog. This is new concept for me to learn. It was a very interesting concept for me to learn. At first, I found it was a little confusing but after I got playing around with it and understanding the different parts within the package and the steps we had to do I found it really easy to do.</p>\n\n<p>After we moved on to getting use to git. This was a new concept for me because I have never really worked with git besides through a web browser. First we started by reading a section from pro git. This section was very helpful for to gain a better understanding of git but reading about the basics. Understanding what the different commands do and understanding what the different messages meant was a little hard but by the end of the lab I had a lot of it understood. A new skill I had a chance to practice was working with git in a command line. I am really glad I got to practice this new skill because I think it will become very helpful in the future. I also think knowing how to be able to access git from the command line is important because it makes working with it so much easier and quicker to get the information you are looking for.</p>")) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-24-lab6.md" . unix) f post (u . "Lab6") (? . 0) 1569342424 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/lab6.html" . unix) (u . "/2019/09/lab6.html") (u . "2019-09-24T10:00:15") (? . 2) (? . 3) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Explorer</h3>\n\n<p>One of the new things that I learned this lab was the explorer. Using the explorer reminded me of using visual debuggers in other program languages. You were able to see what was in the list. This would allow you to be able to see what is stored in the list. I think this was a very interesting concept to learned because it seems like it would be a very helpful tool for debugging. Having a separate window open with the list of variables visible would be really helpful when trying to understand what the code is doing. Another thing I learned to go with has tables is the function this which allows you to print out what you have highlighted in the explorer.</p>\n\n<h3>Plotting</h3>\n\n<p>Plotting was another new thing I learned in the lab today. This concept would be helpful for unit test cases to be able to check the behaviour of the code. The plotting is also useful for watching specific variables change as you change other variables. I feel that plotting would also be good for testing where the output is defined by the input.</p>\n\n<h3>Hash Table functions</h3>\n\n<p>Before the lab I had a familiar sense of <code>Hash Tables</code> from other programming languages but during the lab I learned a lot of new functions that Racket uses. The first interesting thing found was that the period on <code>define (census . list)</code> means that it takes all the inputs and combines them into a list. This seems like a really interesting and helpful tool to use when it comes to doing assignments.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>Before the lab I had some knowledge on \n <b>hash tables</b> from other programming languages. This helped make things click a lot faster and understand what the different functions could do.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The skills that I got to practice during this lab was my debugging skills. More importantly I got to practice using tools to be able to understand the behaviour of the code.  I also got to practice working with tail recursion and cons.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we worked with hash tables. We had to fill in the accumulator in the code that was provided in the lab instructions.  Then we moved to work with explorer and ran a few different commands to see how it worked.  After we worked with plotting. In this section we had to plot the difference between <code>(deriv sin x)</code> and <code>(cos x)</code>.  Finally we moved to work with JSON and writing a function to collect all the statuses from the <code>errors.json</code> file.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Explorer</h3>\n\n<p>One of the new things that I learned this lab was the explorer. Using the explorer reminded me of using visual debuggers in other program languages. You were able to see what was in the list. This would allow you to be able to see what is stored in the list. I think this was a very interesting concept to learned because it seems like it would be a very helpful tool for debugging. Having a separate window open with the list of variables visible would be really helpful when trying to understand what the code is doing. Another thing I learned to go with has tables is the function this which allows you to print out what you have highlighted in the explorer.</p>\n\n<h3>Plotting</h3>\n\n<p>Plotting was another new thing I learned in the lab today. This concept would be helpful for unit test cases to be able to check the behaviour of the code. The plotting is also useful for watching specific variables change as you change other variables. I feel that plotting would also be good for testing where the output is defined by the input.</p>\n\n<h3>Hash Table functions</h3>\n\n<p>Before the lab I had a familiar sense of <code>Hash Tables</code> from other programming languages but during the lab I learned a lot of new functions that Racket uses. The first interesting thing found was that the period on <code>define (census . list)</code> means that it takes all the inputs and combines them into a list. This seems like a really interesting and helpful tool to use when it comes to doing assignments.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>Before the lab I had some knowledge on \n <b>hash tables</b> from other programming languages. This helped make things click a lot faster and understand what the different functions could do.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The skills that I got to practice during this lab was my debugging skills. More importantly I got to practice using tools to be able to understand the behaviour of the code.  I also got to practice working with tail recursion and cons.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we worked with hash tables. We had to fill in the accumulator in the code that was provided in the lab instructions.  Then we moved to work with explorer and ran a few different commands to see how it worked.  After we worked with plotting. In this section we had to plot the difference between <code>(deriv sin x)</code> and <code>(cos x)</code>.  Finally we moved to work with JSON and writing a function to collect all the statuses from the <code>errors.json</code> file.</p>")) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-17-scribble-demo.scrbl" . unix) f post (u . "Scribble Demo") (? . 1) 1568736330 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/scribble-demo.html" . unix) (u . "/2019/09/scribble-demo.html") (u . "2019-09-17T12:52:22") (? . 4) (? . 2) () (u . "\n<p>Replace this with your post text. Add one or more comma-separated\nTags above. The special tag &lsquo;DRAFT&lsquo; will prevent the post from being\npublished.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">hello\n<span style=\"font-weight: bold\">Shopping</span></div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>cheese</p></li>\n  <li>\n   <p>fish</p></li>\n  <li>\n   <p>shuriken</p></li></ul></div>\n\n<div class=\"SIntrapara\">&lt;!&ndash; more &ndash;&gt;</div>") #f (u . "\n<p>Replace this with your post text. Add one or more comma-separated\nTags above. The special tag &lsquo;DRAFT&lsquo; will prevent the post from being\npublished.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">hello\n<span style=\"font-weight: bold\">Shopping</span></div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>cheese</p></li>\n  <li>\n   <p>fish</p></li>\n  <li>\n   <p>shuriken</p></li></ul></div>\n\n<div class=\"SIntrapara\">&lt;!&ndash; more &ndash;&gt;</div>")) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-12-lab3.md" . unix) f post (u . "Lab3") (? . 5) 1568747756 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/lab3.html" . unix) (u . "/2019/09/lab3.html") (u . "2019-09-12T14:36:42") (? . 6) (? . 4) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Racket Recurison</h3>\n\n<p>In lab three there was a lot of new topics covered. The first new topic to me was recursion in Racket. The examples on the <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._.List_.Iteration_from_.Scratch%29\">Racket Guide site</a> helped me understand the concepts a lot more. For list recursion there is first and rest functions. Being able to use these functions made the recursion part much easier than in other programming languages.</p>\n\n<h3>Testing</h3>\n\n<p>Another new topic was unit test and test coverage in Racket. I found this an extremely helpful tool to use. Being able to see what lines of code were used for a test case is very helpful in debugging. I found that looking at the unused line of code after a test case is found made debugging a lot easier. It saved me a lot time because I no longer had to insert print statements to see where the code was going, I was just able to look at the lines the code to see what was and was not entered.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skill that I practised during the lab was my debugging skills in Racket. During the lab we were taught helpful tools to test the code in Racket. By having to fix the code and make sure all the test cases passed allowed me to gain some practice using them.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>There are a few things during the lab that I found interesting. The first one was using the first and rest functions. I found them interesting because I have always struggled with recursion functions but using first and rest made recursion a lot easier to understand and solve the problem.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>Throughout the lab there was a few different things I read to help gain a better understanding.</p>\n\n<p>One thing that I read was documentation on <a href=\"https://beautifulracket.com/explainer/unit-testing.html\">Unit testing in racket</a>. This helped me understand the different things that I needed to know in order to complete the unit testing on the lab. It gave a nice explanation on how to be able to run the test cases.</p>\n\n<p>The other thing I read was the documentation on <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git\">debugging with Git</a>. This was a helpful document to read to understand on what the lab instructions meant.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Racket Recurison</h3>\n\n<p>In lab three there was a lot of new topics covered. The first new topic to me was recursion in Racket. The examples on the <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._.List_.Iteration_from_.Scratch%29\">Racket Guide site</a> helped me understand the concepts a lot more. For list recursion there is first and rest functions. Being able to use these functions made the recursion part much easier than in other programming languages.</p>\n\n<h3>Testing</h3>\n\n<p>Another new topic was unit test and test coverage in Racket. I found this an extremely helpful tool to use. Being able to see what lines of code were used for a test case is very helpful in debugging. I found that looking at the unused line of code after a test case is found made debugging a lot easier. It saved me a lot time because I no longer had to insert print statements to see where the code was going, I was just able to look at the lines the code to see what was and was not entered.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skill that I practised during the lab was my debugging skills in Racket. During the lab we were taught helpful tools to test the code in Racket. By having to fix the code and make sure all the test cases passed allowed me to gain some practice using them.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>There are a few things during the lab that I found interesting. The first one was using the first and rest functions. I found them interesting because I have always struggled with recursion functions but using first and rest made recursion a lot easier to understand and solve the problem.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>Throughout the lab there was a few different things I read to help gain a better understanding.</p>\n\n<p>One thing that I read was documentation on <a href=\"https://beautifulracket.com/explainer/unit-testing.html\">Unit testing in racket</a>. This helped me understand the different things that I needed to know in order to complete the unit testing on the lab. It gave a nice explanation on how to be able to run the test cases.</p>\n\n<p>The other thing I read was the documentation on <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git\">debugging with Git</a>. This was a helpful document to read to understand on what the lab instructions meant.</p>")) ((p+ #"/home/student/fcshome/cs2613/journal/_src/posts/2019-09-10-lab2.md" . unix) f post (u . "Lab2") (? . 6) 1568144528 (p+ #"/home/student/fcshome/cs2613/journal/2019/09/lab2.html" . unix) (u . "/2019/09/lab2.html") (u . "2019-09-10T11:12:08") (? . 7) (? . 5) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<p>Today in the lab we covered a fair bit of material that was new to me. The first new concept that was covered was some more different git commands. We looked at how to add just specific files, seeing what has changed after a file has been added.</p>\n\n<p>Another new concept that was covered today was Racket. I have never worked with racket before and it was a little confusing but after I read some of the documentation things become pretty interesting. There was a new tool that was introduced to me as well. I have new used DrRacket so at first it was hard to grasp the different concepts. Another thing that was confusing to me was all the brackets that Racket likes. I got a lot of errors because I forgot brackets on statements. The tutorial was laid out nicely that explained things very well.</p>\n\n<p>Working with DrRacket was a very interesting concept. I was really interesting working with the interactive window part. I found it very useful if you wanted to test something simple or small or see how it works. An example would be setting up the circles.</p>\n\n<p>A familiar concept that we looked at in todays lab was git cloning and lookking at the git log. I worked with cloning in the first lab to verify that the push was successful. I also worked with git log to track the commit messages that were being made.</p>\n\n<p>Some new skills i practiced in this lab was using git. I learned a few different commands and how to best use them so I am not committing things that dont need to be committed</p>") #f (u . "\n<p>Today in the lab we covered a fair bit of material that was new to me. The first new concept that was covered was some more different git commands. We looked at how to add just specific files, seeing what has changed after a file has been added.</p>\n\n<p>Another new concept that was covered today was Racket. I have never worked with racket before and it was a little confusing but after I read some of the documentation things become pretty interesting. There was a new tool that was introduced to me as well. I have new used DrRacket so at first it was hard to grasp the different concepts. Another thing that was confusing to me was all the brackets that Racket likes. I got a lot of errors because I forgot brackets on statements. The tutorial was laid out nicely that explained things very well.</p>\n\n<p>Working with DrRacket was a very interesting concept. I was really interesting working with the interactive window part. I found it very useful if you wanted to test something simple or small or see how it works. An example would be setting up the circles.</p>\n\n<p>A familiar concept that we looked at in todays lab was git cloning and lookking at the git log. I worked with cloning in the first lab to verify that the push was successful. I also worked with git log to track the commit messages that were being made.</p>\n\n<p>Some new skills i practiced in this lab was using git. I learned a few different commands and how to best use them so I am not committing things that dont need to be committed</p>"))))