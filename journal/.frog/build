((3) 0 () 24 ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-10-lab2.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-24-lab6.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-21-lab20.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-26-lab-21.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-20-lab-18.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-05-lab-17.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-20-lab-19.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-17-lab4.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-12-lab3.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-17-scribble-demo.scrbl" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-05-lab1.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-19-lab-5.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-15-lab-12.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-10-lab-11.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-17-lab-13.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-01-lab-8.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-08-lab-10.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-26-lab7.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-12-03-lab-22.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-24-lab-14.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-08-lab-9.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-29-lab-15.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-31-lab-16.md" . unix) (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-12-03-lab-23.md" . unix)) () (h ! (equal) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-12-lab3.md" . unix) f post (u . "Lab3") (? . 8) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/lab3.html" . unix) (u . "/2019/09/lab3.html") (u . "2019-09-12T14:36:42") (? . 0) (? . 7) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Racket Recurison</h3>\n\n<p>In lab three there was a lot of new topics covered. The first new topic to me was recursion in Racket. The examples on the <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._.List_.Iteration_from_.Scratch%29\">Racket Guide site</a> helped me understand the concepts a lot more. For list recursion there is first and rest functions. Being able to use these functions made the recursion part much easier than in other programming languages.</p>\n\n<h3>Testing</h3>\n\n<p>Another new topic was unit test and test coverage in Racket. I found this an extremely helpful tool to use. Being able to see what lines of code were used for a test case is very helpful in debugging. I found that looking at the unused line of code after a test case is found made debugging a lot easier. It saved me a lot time because I no longer had to insert print statements to see where the code was going, I was just able to look at the lines the code to see what was and was not entered.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skill that I practised during the lab was my debugging skills in Racket. During the lab we were taught helpful tools to test the code in Racket. By having to fix the code and make sure all the test cases passed allowed me to gain some practice using them.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>There are a few things during the lab that I found interesting. The first one was using the first and rest functions. I found them interesting because I have always struggled with recursion functions but using first and rest made recursion a lot easier to understand and solve the problem.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>Throughout the lab there was a few different things I read to help gain a better understanding.</p>\n\n<p>One thing that I read was documentation on <a href=\"https://beautifulracket.com/explainer/unit-testing.html\">Unit testing in racket</a>. This helped me understand the different things that I needed to know in order to complete the unit testing on the lab. It gave a nice explanation on how to be able to run the test cases.</p>\n\n<p>The other thing I read was the documentation on <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git\">debugging with Git</a>. This was a helpful document to read to understand on what the lab instructions meant.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Racket Recurison</h3>\n\n<p>In lab three there was a lot of new topics covered. The first new topic to me was recursion in Racket. The examples on the <a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._.List_.Iteration_from_.Scratch%29\">Racket Guide site</a> helped me understand the concepts a lot more. For list recursion there is first and rest functions. Being able to use these functions made the recursion part much easier than in other programming languages.</p>\n\n<h3>Testing</h3>\n\n<p>Another new topic was unit test and test coverage in Racket. I found this an extremely helpful tool to use. Being able to see what lines of code were used for a test case is very helpful in debugging. I found that looking at the unused line of code after a test case is found made debugging a lot easier. It saved me a lot time because I no longer had to insert print statements to see where the code was going, I was just able to look at the lines the code to see what was and was not entered.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skill that I practised during the lab was my debugging skills in Racket. During the lab we were taught helpful tools to test the code in Racket. By having to fix the code and make sure all the test cases passed allowed me to gain some practice using them.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>There are a few things during the lab that I found interesting. The first one was using the first and rest functions. I found them interesting because I have always struggled with recursion functions but using first and rest made recursion a lot easier to understand and solve the problem.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>Throughout the lab there was a few different things I read to help gain a better understanding.</p>\n\n<p>One thing that I read was documentation on <a href=\"https://beautifulracket.com/explainer/unit-testing.html\">Unit testing in racket</a>. This helped me understand the different things that I needed to know in order to complete the unit testing on the lab. It gave a nice explanation on how to be able to run the test cases.</p>\n\n<p>The other thing I read was the documentation on <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git\">debugging with Git</a>. This was a helpful document to read to understand on what the lab instructions meant.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-26-lab7.md" . unix) f post (u . "Lab7") (? . 17) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/lab7.html" . unix) (u . "/2019/09/lab7.html") (u . "2019-09-26T11:14:10") (? . 1) (? . 15) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Macros</h3>\n\n<p>In the lab we discussed the construction of programs using macros. To define a macro in racket we use <code>define-syntax-rule</code>. This is basically a function that does not evaluate the arguments. This seems like it would be helpful in a case where you want to evaluate math functions or different boolean statements.   \n <h3>Pattern Matching</h3> The next new thing that was covered in the lab was match. This is a function where you specify a pattern to match against the data instead of specifying a test for each case. This seems like a very helpful when using a pattern against a list.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>There was not a lot of familiar concepts. The only concept that was a little familiar was using <code>Let</code> and <code>Let*</code>. The only reasons why these concepts where a little familiar is because we looked at them in a previous lab. They did not completely make sense until this lab.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>During the lab there was not any new skills that I practiced. I practiced my problem solving skill in the lab. This was done by having to fill in the blanks in the code. This was done for part 4 of the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L07/\">lab</a>.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>Some of the things that I found really interesting is the lab was using <code>match</code>. This was really interesting to me because it was something I have not seen before. It was a cool concept to look at another way to use something similar to <code>cons</code> for lists.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>The first thing we had to do in the lab is read a few links to get some background.  Then we looked at \n <b>macros</b>. During this section we looked at redefining <code>and</code> and redefining <code>or</code>.  Then we looked at \n <b>pattern matching</b>. Here we used match with maps and looked at <code>Let</code> and <code>Let *</code>.  Then we looked at \n <b>list transformers to macros</b>. During this part of the lab we looked at reading a list in a macro.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Macros</h3>\n\n<p>In the lab we discussed the construction of programs using macros. To define a macro in racket we use <code>define-syntax-rule</code>. This is basically a function that does not evaluate the arguments. This seems like it would be helpful in a case where you want to evaluate math functions or different boolean statements.   \n <h3>Pattern Matching</h3> The next new thing that was covered in the lab was match. This is a function where you specify a pattern to match against the data instead of specifying a test for each case. This seems like a very helpful when using a pattern against a list.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>There was not a lot of familiar concepts. The only concept that was a little familiar was using <code>Let</code> and <code>Let*</code>. The only reasons why these concepts where a little familiar is because we looked at them in a previous lab. They did not completely make sense until this lab.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>During the lab there was not any new skills that I practiced. I practiced my problem solving skill in the lab. This was done by having to fill in the blanks in the code. This was done for part 4 of the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L07/\">lab</a>.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>Some of the things that I found really interesting is the lab was using <code>match</code>. This was really interesting to me because it was something I have not seen before. It was a cool concept to look at another way to use something similar to <code>cons</code> for lists.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>The first thing we had to do in the lab is read a few links to get some background.  Then we looked at \n <b>macros</b>. During this section we looked at redefining <code>and</code> and redefining <code>or</code>.  Then we looked at \n <b>pattern matching</b>. Here we used match with maps and looked at <code>Let</code> and <code>Let *</code>.  Then we looked at \n <b>list transformers to macros</b>. During this part of the lab we looked at reading a list in a macro.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-26-lab-21.md" . unix) f post (u . "Lab 21") (? . 3) 1575401369 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/11/lab-21.html" . unix) (u . "/2019/11/lab-21.html") (u . "2019-11-26T17:11:27") (? . 2) (? . 18) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"working-with-grids\">Working with grids</h3>\n\n<p>During this section of the lab we observed how ranges work and how <code>surf</code> work. The function <code>surf</code> takes in points and plots them in a graph. We also saw how the Octaves built in <a href=\"https://octave.org/doc/v4.2.1/Three_002dDimensional-Plots.html#XREFmeshgrid\">meshgrid</a> function works. Meshgrid will take a cartesian product of two arrays. This second on the lab was very interesting because we also explored how range in Octave works. The out put of <code>surf</code> was very interesting because it plotted the points in a 3D graph.</p>\n\n<h3 id=\"creating-3d-plots\">Creating 3d plots</h3>\n\n<p>The next new topic we looked at was making 3D plots. In the past labs we used <code>surf()</code> which created a 3D plot but we never looked much into writing the code to initialize the points. This was a pretty interesting section because the plot that was produced was very interesting. We also discovered that there is something called <code>contourf()</code>. This will produce a 2D version of the plot.</p>\n\n<h3 id=\"using-arrayfun\">Using arrayfun</h3>\n\n<p>In this section we learnt what <code>arrayfun</code> is and how to use <a href=\"https://octave.org/doc/v4.2.0/Anonymous-Functions.html\">anonymous functions</a>.</p>\n\n<h4 id=\"arrayfun\">arrayfun</h4>\n\n<p>The function <code>arrayfun</code> will take a function as the first parameter then the other parameters will be arrays. This function will take one or more arrays in. Then <code>arrayfun</code> will apply the given function to each of the element in the arrays. At the beginning I fond it a little hard to understand how <code>arrayfun</code> works. Then I found <a href=\"https://www.mathworks.com/help/matlab/ref/arrayfun.html\">this site</a> and it really helped me understand <code>arrayfun</code> a lot more.</p>\n\n<h4 id=\"anonymous-function\">anonymous function</h4>\n\n<p>Anonymous functions in the Octave can appear in two different formats. The first format takes the function and assigns it to a variable. Then pass the variable where the function would go. Below is an example of what the code would look like.</p>\n\n<pre><code>f=@(x,y)(delta(beta,a,[x;y]));\nZ=arrayfun(f,X,Y);</code></pre>\n\n<p>The second format will have the anonymous function written in as the first parameter. Below is an example of how that could would work.</p>\n\n<pre><code>arrayfun(@(x,y)(delta(beta,a,[x;y]))</code></pre>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In the lab there was only one concepts that I was familiar with. At the beginning I was finding the tasks we were expected to do a bit hard. When we got about half way through the lab I found I was understanding the material a bit more. This made the last half of the lab a bit easier to follow.</p>\n\n<p>The concept I was familiar with was <strong>defining and testing a function</strong>. I was only a little familiar with this topic because we looked at in the last lab. This did not really help me to understand the lab because I still did not understand them completely. At the end of today&rsquo;s lab I understand them a bit better.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>During the lab I worked on my Octave programming skills. I did this because the whole lab was programming in Octave. I also worked on my debugging skills. This skill was improved because throughout the lab I got a couple errors and I had to figure out how to fix them. The most frequent error I got was that I was not calling the files with the test cases in them properly. Instead of calling them by <code>test delta</code>, I was just calling <code>delta</code>.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found how to create a range interesting. This seemed similar to some of the languages we looked at. The code to create a range is <code>r = [-1:0.5:1]</code>. The first parameter (&ndash;1) is the starting point in the range. The second parameter (0.5) is how much to increment by. The third parameter (1) is the end number.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at girds and how you can create them in Octave. We also explore how Octave creates ranges.</p>\n\n<p>Then we moved to defining and testing functions. During this section of the lab we filled in the function that was provided in the lab instructions. We then had to complete the three test cases that was also provided.</p>\n\n<p>Then we moved to creating 3D plots. We had to fill in the code for the file <code>surfvex</code> that was provided in the lab instructions. Below is an example of what the code would look like for <code>surfvex</code>.</p>\n\n<pre><code>a = [4;4];\nbeta = 7.5;\n\n%% Generating vectors\nrange = [-4:0.1:8];\n\n% Compute cartesian product (grid)\n[X,Y] = meshgrid(range,range);\n[rows,cols] = size(X);\n\nfor i = 1:rows\n  for j = 1:cols\n    b = [X(i,j); Y(i,j)];\n    Z(i,j) = delta (beta,a,b);\n  endfor\nendfor\n\nsurf(X,Y,Z);\n%contourf(X,Y,Z);</code></pre>\n\n<p>During this section we replaced <code>surf(X,Y,Z)</code> with <code>contour(X,Y,Z)</code>.</p>\n\n<p>Then we moved on to look at arrayfun and anonymous functions. The previous graphs were created in the file <code>surfvex</code>. For this section we had to create a file called <code>surfvex2</code>. This will produce the same graphs as above by using anonymous functions instead of the for loop. We had to fill in <code>f</code> so it becomes an anonymous function. Below is what the code looks like with the anonymous function.</p>\n\n<p>We compared the time it took the anonymous function to run compared to the one with the for loop. It turns out that the function that uses the anonymous function is a bit faster. Below is a copy of what was typed into the command line.</p>\n\n<pre><code>&gt;&gt; surfvex\nElapsed time is 0.672515 seconds.\n&gt;&gt; surfvex2\nElapsed time is 0.548361 seconds.</code></pre>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"working-with-grids\">Working with grids</h3>\n\n<p>During this section of the lab we observed how ranges work and how <code>surf</code> work. The function <code>surf</code> takes in points and plots them in a graph. We also saw how the Octaves built in <a href=\"https://octave.org/doc/v4.2.1/Three_002dDimensional-Plots.html#XREFmeshgrid\">meshgrid</a> function works. Meshgrid will take a cartesian product of two arrays. This second on the lab was very interesting because we also explored how range in Octave works. The out put of <code>surf</code> was very interesting because it plotted the points in a 3D graph.</p>\n\n<h3 id=\"creating-3d-plots\">Creating 3d plots</h3>\n\n<p>The next new topic we looked at was making 3D plots. In the past labs we used <code>surf()</code> which created a 3D plot but we never looked much into writing the code to initialize the points. This was a pretty interesting section because the plot that was produced was very interesting. We also discovered that there is something called <code>contourf()</code>. This will produce a 2D version of the plot.</p>\n\n<h3 id=\"using-arrayfun\">Using arrayfun</h3>\n\n<p>In this section we learnt what <code>arrayfun</code> is and how to use <a href=\"https://octave.org/doc/v4.2.0/Anonymous-Functions.html\">anonymous functions</a>.</p>\n\n<h4 id=\"arrayfun\">arrayfun</h4>\n\n<p>The function <code>arrayfun</code> will take a function as the first parameter then the other parameters will be arrays. This function will take one or more arrays in. Then <code>arrayfun</code> will apply the given function to each of the element in the arrays. At the beginning I fond it a little hard to understand how <code>arrayfun</code> works. Then I found <a href=\"https://www.mathworks.com/help/matlab/ref/arrayfun.html\">this site</a> and it really helped me understand <code>arrayfun</code> a lot more.</p>\n\n<h4 id=\"anonymous-function\">anonymous function</h4>\n\n<p>Anonymous functions in the Octave can appear in two different formats. The first format takes the function and assigns it to a variable. Then pass the variable where the function would go. Below is an example of what the code would look like.</p>\n\n<pre><code>f=@(x,y)(delta(beta,a,[x;y]));\nZ=arrayfun(f,X,Y);</code></pre>\n\n<p>The second format will have the anonymous function written in as the first parameter. Below is an example of how that could would work.</p>\n\n<pre><code>arrayfun(@(x,y)(delta(beta,a,[x;y]))</code></pre>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In the lab there was only one concepts that I was familiar with. At the beginning I was finding the tasks we were expected to do a bit hard. When we got about half way through the lab I found I was understanding the material a bit more. This made the last half of the lab a bit easier to follow.</p>\n\n<p>The concept I was familiar with was <strong>defining and testing a function</strong>. I was only a little familiar with this topic because we looked at in the last lab. This did not really help me to understand the lab because I still did not understand them completely. At the end of today&rsquo;s lab I understand them a bit better.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>During the lab I worked on my Octave programming skills. I did this because the whole lab was programming in Octave. I also worked on my debugging skills. This skill was improved because throughout the lab I got a couple errors and I had to figure out how to fix them. The most frequent error I got was that I was not calling the files with the test cases in them properly. Instead of calling them by <code>test delta</code>, I was just calling <code>delta</code>.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found how to create a range interesting. This seemed similar to some of the languages we looked at. The code to create a range is <code>r = [-1:0.5:1]</code>. The first parameter (&ndash;1) is the starting point in the range. The second parameter (0.5) is how much to increment by. The third parameter (1) is the end number.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at girds and how you can create them in Octave. We also explore how Octave creates ranges.</p>\n\n<p>Then we moved to defining and testing functions. During this section of the lab we filled in the function that was provided in the lab instructions. We then had to complete the three test cases that was also provided.</p>\n\n<p>Then we moved to creating 3D plots. We had to fill in the code for the file <code>surfvex</code> that was provided in the lab instructions. Below is an example of what the code would look like for <code>surfvex</code>.</p>\n\n<pre><code>a = [4;4];\nbeta = 7.5;\n\n%% Generating vectors\nrange = [-4:0.1:8];\n\n% Compute cartesian product (grid)\n[X,Y] = meshgrid(range,range);\n[rows,cols] = size(X);\n\nfor i = 1:rows\n  for j = 1:cols\n    b = [X(i,j); Y(i,j)];\n    Z(i,j) = delta (beta,a,b);\n  endfor\nendfor\n\nsurf(X,Y,Z);\n%contourf(X,Y,Z);</code></pre>\n\n<p>During this section we replaced <code>surf(X,Y,Z)</code> with <code>contour(X,Y,Z)</code>.</p>\n\n<p>Then we moved on to look at arrayfun and anonymous functions. The previous graphs were created in the file <code>surfvex</code>. For this section we had to create a file called <code>surfvex2</code>. This will produce the same graphs as above by using anonymous functions instead of the for loop. We had to fill in <code>f</code> so it becomes an anonymous function. Below is what the code looks like with the anonymous function.</p>\n\n<p>We compared the time it took the anonymous function to run compared to the one with the for loop. It turns out that the function that uses the anonymous function is a bit faster. Below is a copy of what was typed into the command line.</p>\n\n<pre><code>&gt;&gt; surfvex\nElapsed time is 0.672515 seconds.\n&gt;&gt; surfvex2\nElapsed time is 0.548361 seconds.</code></pre>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-24-lab-14.md" . unix) f post (u . "Lab 14") (? . 19) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-14.html" . unix) (u . "/2019/10/lab-14.html") (u . "2019-10-24T10:52:29") (? . 14) (? . 21) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>One new concepts I learnt this lab was testing in python. Today I learnt about the tool called <a href=\"https://docs.pytest.org/en/latest/\">pytest</a> that is used to test the code. This is a similar concept to the testing tool we used in JavaScript called <code>jasmine</code>. This was nice because it made it easier to understand pytest in the beginning.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>The concept that was familiar to me was coding in Python since I already took a course on it. This made it easy to follow along in the lab and understand what was happening.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>In this lab I did not practice any new skills. However I practice so existing skills. One skill that I improved on was my testing skills. In the lab I learnt how pytest worked to be able to use it to test the code created. I improved my python programming skills as well since the lab was an introduction to coding in python.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>An interesting topic in today&rsquo;s lab was the <strong>pytest</strong>. This was an interesting topic because I never knew about it. This functions appears to make testing python files a lot easier than when I had to do it in other courses.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>We were given <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/your-first-python-program.html#everythingisanobject\">chapter 1</a> in <strong>Dive into Python 3</strong> to read for the lab. This reading was very helpful in the lab to explain topics I was having problems with.  First we copied the python code from <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L14/_humansize.py/\">humansize.py</a> and ran it from the command line using <code>python3 humansize.py</code>. Then we ran them through the terminal using <code>python3</code> and typed in lines to run the function.  Then we moved to writing test cases using <a href=\"https://docs.pytest.org/en/latest/\">pytest</a>. We first copied the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L14/_test_humansize.py/\">initial test cases</a>that were given during the lab. We ran the test cases in the terminal by using <code>pytest-3</code>. Then we ran it through vscodium but adding the <code>Python: Configure Tests</code> in the terminal then we were able to run the test cases.  After we moved onto looking at modules in python. Here we saw that if we want a function from a file we can add <code>from humansize import approximate size</code>. Then if we want to be able to access all the functions in a file we add <code>import humansize</code>.  The last two topics we looked at was <strong>indentation</strong> and <strong>expectations</strong> in python. For the indentation section we looked at the FizzBuzz problem and added the indentations so the code will run properly. After that we looked at expectations. In this section we had to fix the function to make it check so it does not divide by 0.</p>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>One new concepts I learnt this lab was testing in python. Today I learnt about the tool called <a href=\"https://docs.pytest.org/en/latest/\">pytest</a> that is used to test the code. This is a similar concept to the testing tool we used in JavaScript called <code>jasmine</code>. This was nice because it made it easier to understand pytest in the beginning.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>The concept that was familiar to me was coding in Python since I already took a course on it. This made it easy to follow along in the lab and understand what was happening.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>In this lab I did not practice any new skills. However I practice so existing skills. One skill that I improved on was my testing skills. In the lab I learnt how pytest worked to be able to use it to test the code created. I improved my python programming skills as well since the lab was an introduction to coding in python.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>An interesting topic in today&rsquo;s lab was the <strong>pytest</strong>. This was an interesting topic because I never knew about it. This functions appears to make testing python files a lot easier than when I had to do it in other courses.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>We were given <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/your-first-python-program.html#everythingisanobject\">chapter 1</a> in <strong>Dive into Python 3</strong> to read for the lab. This reading was very helpful in the lab to explain topics I was having problems with.  First we copied the python code from <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L14/_humansize.py/\">humansize.py</a> and ran it from the command line using <code>python3 humansize.py</code>. Then we ran them through the terminal using <code>python3</code> and typed in lines to run the function.  Then we moved to writing test cases using <a href=\"https://docs.pytest.org/en/latest/\">pytest</a>. We first copied the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L14/_test_humansize.py/\">initial test cases</a>that were given during the lab. We ran the test cases in the terminal by using <code>pytest-3</code>. Then we ran it through vscodium but adding the <code>Python: Configure Tests</code> in the terminal then we were able to run the test cases.  After we moved onto looking at modules in python. Here we saw that if we want a function from a file we can add <code>from humansize import approximate size</code>. Then if we want to be able to access all the functions in a file we add <code>import humansize</code>.  The last two topics we looked at was <strong>indentation</strong> and <strong>expectations</strong> in python. For the indentation section we looked at the FizzBuzz problem and added the indentations so the code will run properly. After that we looked at expectations. In this section we had to fix the function to make it check so it does not divide by 0.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-10-lab-11.md" . unix) f post (u . "Lab 11") (? . 13) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-11.html" . unix) (u . "/2019/10/lab-11.html") (u . "2019-10-10T11:29:43") (? . 16) (? . 12) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h1 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h1>\n\n<h2 id=\"array-methods\">Array methods</h2>\n\n<p>Looking at Array methods we learnt that they have higher order functions that can be really useful. Learning these functions ended up being useful for working with larger lists. For example using <code>reduced</code> and an anonymous function to calculate the average of a list. Another array method that was new for me was <code>forEach</code>. This method gives the users to iterate over a list with an arbitrary action without fussing with loops indices and bounds.</p>\n\n<h2 id=\"json-parsing\">Json parsing</h2>\n\n<p>Looking at json was not particular new since we used racket in the past to parse through them. However using JavaScript to parse through the json file to retrieve the information for a specific name was a new concept.</p>\n\n<h1 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h1>\n\n<p>While looking at the <a href=\"http://eloquentjavascript.net/05_higher_order.html\">higher order functions</a> that JavaScript has we learnt one of the higher order functions is <code>map</code> and <code>filter</code>. It turns out that <code>map</code> and <code>filter</code> behave similar to the Racket behavior. Knowing how they were used in Racket make it a lot easier to learn how they are used in JavaScript.</p>\n\n<h1 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h1>\n\n<p>There were no new skills that I practiced in this lab. However I practiced my coding skills in JavaScript. I also practiced my testing skills. I achieved this by making sure the few section of code I wrote was able to pass the test cases that were defined in the lab instructions.</p>\n\n<h1 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h1>\n\n<p>I found the <a href=\"http://eloquentjavascript.net/05_higher_order.html#h_TcUD2vzyMe\">flattened exercise</a> to be really interesting. I found this interesting because for Assignment 3 my code was about 20 lines long. However in the lab I was able to get the same results using one line of code by using the reduce and concat method. This showed how important it is to know the higher order functions and array methods because they can make things a lot more efficient.</p>\n\n<h1 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h1>\n\n<p>First we had to read background information on JavaScript. This contained reading <a href=\"http://eloquentjavascript.net/05_higher_order.html\">chapter 5</a> and <a href=\"http://eloquentjavascript.net/06_object.html\">chapter 6</a> from Eloquent JavaScript. Then we looked at array methods. In this part of the lab we focused on chapter 5 a lot. We looked at how JavaScript arrays have higher order methods. Then we worked on solving the flatten exercise using the methods <code>reduce</code> and <code>concat</code>. Then we looked at parsing through a json file using JavaScript. Here we wrote a function to find the information that is associated with a particular name that is passed in. Then we looked at methods in JavaScript.</p>") #f (u . "\n<h1 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h1>\n\n<h2 id=\"array-methods\">Array methods</h2>\n\n<p>Looking at Array methods we learnt that they have higher order functions that can be really useful. Learning these functions ended up being useful for working with larger lists. For example using <code>reduced</code> and an anonymous function to calculate the average of a list. Another array method that was new for me was <code>forEach</code>. This method gives the users to iterate over a list with an arbitrary action without fussing with loops indices and bounds.</p>\n\n<h2 id=\"json-parsing\">Json parsing</h2>\n\n<p>Looking at json was not particular new since we used racket in the past to parse through them. However using JavaScript to parse through the json file to retrieve the information for a specific name was a new concept.</p>\n\n<h1 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h1>\n\n<p>While looking at the <a href=\"http://eloquentjavascript.net/05_higher_order.html\">higher order functions</a> that JavaScript has we learnt one of the higher order functions is <code>map</code> and <code>filter</code>. It turns out that <code>map</code> and <code>filter</code> behave similar to the Racket behavior. Knowing how they were used in Racket make it a lot easier to learn how they are used in JavaScript.</p>\n\n<h1 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h1>\n\n<p>There were no new skills that I practiced in this lab. However I practiced my coding skills in JavaScript. I also practiced my testing skills. I achieved this by making sure the few section of code I wrote was able to pass the test cases that were defined in the lab instructions.</p>\n\n<h1 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h1>\n\n<p>I found the <a href=\"http://eloquentjavascript.net/05_higher_order.html#h_TcUD2vzyMe\">flattened exercise</a> to be really interesting. I found this interesting because for Assignment 3 my code was about 20 lines long. However in the lab I was able to get the same results using one line of code by using the reduce and concat method. This showed how important it is to know the higher order functions and array methods because they can make things a lot more efficient.</p>\n\n<h1 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h1>\n\n<p>First we had to read background information on JavaScript. This contained reading <a href=\"http://eloquentjavascript.net/05_higher_order.html\">chapter 5</a> and <a href=\"http://eloquentjavascript.net/06_object.html\">chapter 6</a> from Eloquent JavaScript. Then we looked at array methods. In this part of the lab we focused on chapter 5 a lot. We looked at how JavaScript arrays have higher order methods. Then we worked on solving the flatten exercise using the methods <code>reduce</code> and <code>concat</code>. Then we looked at parsing through a json file using JavaScript. Here we wrote a function to find the information that is associated with a particular name that is passed in. Then we looked at methods in JavaScript.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-05-lab-17.md" . unix) f post (u . "Lab 17") (? . 5) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/11/lab-17.html" . unix) (u . "/2019/11/lab-17.html") (u . "2019-11-05T10:10:41") (? . 22) (? . 4) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"regular-expression\">Regular Expression</h3>\n\n<p>During this section of the lab we looked at how regular expressions worked. We followed the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#streetaddresses\">example</a> for the textbook. This example helped make regular expression much easier to understand. In the demo we ran <code>re.sub('Road$','RD.',s)</code>. This little section of the code looks in the string s, and tries to find &lsquo;Road&rsquo;. The dollar signs make it so that &lsquo;Road&rsquo; has to be at the end of the string. Once &lsquo;Road&rsquo; is found then it will replace it with &lsquo;RD.&rsquo;. The quick demo made it much easier to understand regular expression. Another thing that really helped to understand the regular expressions was reading <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html\">chapter5</a> of the book <strong>Dive Into Python 3</strong>.</p>\n\n<h3 id=\"stripping-quotes\">Stripping Quotes</h3>\n\n<p>This section of the lab builds off the previous section.This section we used regular expressions to remove all the <strong>\"\"</strong> that may be in a string. During this part there was a lot of new concepts introduced like the <code>[^\"]</code> is a character class. This section of the lab was a bit difficult to understand at the beginning. Once the topics were explained a bit more in details it was a little easier to understand. The</p>\n\n<h3 id=\"handling-quoted-commas\">Handling Quoted Commas</h3>\n\n<p>During this section of the lab we worked on creating a function that will break things up into three different columns. This section of the lab was pretty tricky to understand at the beginning. A document that really helped me understand the topic a lot more was from the textbook <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#verbosere\">Dive Into Python 3</a>.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>One of the familiar topics in today&rsquo;s lab was splitting strings. This was familiar for a course I took last year. At the beginning I had a hard to remembering how <code>split</code> and <code>splitlines</code> work. After looking at <a href=\"https://www.w3schools.com/python/ref_string_split.asp\">split</a> and <a href=\"https://www.w3schools.com/python/ref_string_splitlines.asp\">splitlines</a> I was able to complete the section of the lab without any problem.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>Some of the new skills I practiced during the lab was using regular expressions. I also improved on my python coding skills because the whole lab was programming in python. During the lab I also improved on my debugging skills and problem solving skills. This was improved by having to examine the different errors my code was throwing and trying to figure out how to fix them.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>During the lab one of the easiest topics cover was <strong>splitting strings</strong>. This was easier because I already had some experience working with them. The topics on <strong>regular expressions</strong> were a bit more tricky to follow and understand at the beginning.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>In the lab we first worked with <strong>splitting strings</strong>. In this section of the lab we had to separate strings when a comma appears. Then we moved on to working with <strong>regular expressions</strong>. In this section we looked at an <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#streetaddresses\">example</a> from <strong>Dive Into Python 3</strong>. We went through this example as group and discussed each of the lines a bit. Then we looked at <strong>stripping quotes</strong>. In this section we took what we talked about regular expression and put it into practice. Some of the documents we read in this section was on <a href=\"https://docs.python.org/3/library/re.html#match-objects\">groups</a> and <a href=\"https://docs.python.org/3/library/re.html#regular-expression-syntax\">regular expression syntax</a>from the python documentation. Then we looked at <strong>handling quoted comma</strong>. In this section we completed the definition of <code>split_row_3</code> that was given in the lab. The code was suppose to add the strings into 3 different columns then remove the commas. During this section we read the document on <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#verbosere\">verbose reqular expressions</a> from <strong>Dive Into Python 3</strong>.</p>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"regular-expression\">Regular Expression</h3>\n\n<p>During this section of the lab we looked at how regular expressions worked. We followed the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#streetaddresses\">example</a> for the textbook. This example helped make regular expression much easier to understand. In the demo we ran <code>re.sub('Road$','RD.',s)</code>. This little section of the code looks in the string s, and tries to find &lsquo;Road&rsquo;. The dollar signs make it so that &lsquo;Road&rsquo; has to be at the end of the string. Once &lsquo;Road&rsquo; is found then it will replace it with &lsquo;RD.&rsquo;. The quick demo made it much easier to understand regular expression. Another thing that really helped to understand the regular expressions was reading <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html\">chapter5</a> of the book <strong>Dive Into Python 3</strong>.</p>\n\n<h3 id=\"stripping-quotes\">Stripping Quotes</h3>\n\n<p>This section of the lab builds off the previous section.This section we used regular expressions to remove all the <strong>\"\"</strong> that may be in a string. During this part there was a lot of new concepts introduced like the <code>[^\"]</code> is a character class. This section of the lab was a bit difficult to understand at the beginning. Once the topics were explained a bit more in details it was a little easier to understand. The</p>\n\n<h3 id=\"handling-quoted-commas\">Handling Quoted Commas</h3>\n\n<p>During this section of the lab we worked on creating a function that will break things up into three different columns. This section of the lab was pretty tricky to understand at the beginning. A document that really helped me understand the topic a lot more was from the textbook <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#verbosere\">Dive Into Python 3</a>.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>One of the familiar topics in today&rsquo;s lab was splitting strings. This was familiar for a course I took last year. At the beginning I had a hard to remembering how <code>split</code> and <code>splitlines</code> work. After looking at <a href=\"https://www.w3schools.com/python/ref_string_split.asp\">split</a> and <a href=\"https://www.w3schools.com/python/ref_string_splitlines.asp\">splitlines</a> I was able to complete the section of the lab without any problem.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>Some of the new skills I practiced during the lab was using regular expressions. I also improved on my python coding skills because the whole lab was programming in python. During the lab I also improved on my debugging skills and problem solving skills. This was improved by having to examine the different errors my code was throwing and trying to figure out how to fix them.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>During the lab one of the easiest topics cover was <strong>splitting strings</strong>. This was easier because I already had some experience working with them. The topics on <strong>regular expressions</strong> were a bit more tricky to follow and understand at the beginning.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>In the lab we first worked with <strong>splitting strings</strong>. In this section of the lab we had to separate strings when a comma appears. Then we moved on to working with <strong>regular expressions</strong>. In this section we looked at an <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#streetaddresses\">example</a> from <strong>Dive Into Python 3</strong>. We went through this example as group and discussed each of the lines a bit. Then we looked at <strong>stripping quotes</strong>. In this section we took what we talked about regular expression and put it into practice. Some of the documents we read in this section was on <a href=\"https://docs.python.org/3/library/re.html#match-objects\">groups</a> and <a href=\"https://docs.python.org/3/library/re.html#regular-expression-syntax\">regular expression syntax</a>from the python documentation. Then we looked at <strong>handling quoted comma</strong>. In this section we completed the definition of <code>split_row_3</code> that was given in the lab. The code was suppose to add the strings into 3 different columns then remove the commas. During this section we read the document on <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/regular-expressions.html#verbosere\">verbose reqular expressions</a> from <strong>Dive Into Python 3</strong>.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-05-lab1.md" . unix) f post (u . "Lab1") (? . 10) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/lab1.html" . unix) (u . "/2019/09/lab1.html") (u . "2019-09-05T12:00:00") #f (? . 0) (c (u . "Author: Cassandra Wendlandt")) (u . "\n<p>In the lab we started with some Linux command line review. Using the command line to make directory&rsquo;s, open a plain text editor and editing files that way were familiar concepts I learned from a previous coop. It was a good review although because I have not used those commands in a while.</p>\n\n<p>Then we moved on working with Frog. This is new concept for me to learn. It was a very interesting concept for me to learn. At first, I found it was a little confusing but after I got playing around with it and understanding the different parts within the package and the steps we had to do I found it really easy to do.</p>\n\n<p>After we moved on to getting use to git. This was a new concept for me because I have never really worked with git besides through a web browser. First we started by reading a section from pro git. This section was very helpful for to gain a better understanding of git but reading about the basics. Understanding what the different commands do and understanding what the different messages meant was a little hard but by the end of the lab I had a lot of it understood. A new skill I had a chance to practice was working with git in a command line. I am really glad I got to practice this new skill because I think it will become very helpful in the future. I also think knowing how to be able to access git from the command line is important because it makes working with it so much easier and quicker to get the information you are looking for.</p>") #f (u . "\n<p>In the lab we started with some Linux command line review. Using the command line to make directory&rsquo;s, open a plain text editor and editing files that way were familiar concepts I learned from a previous coop. It was a good review although because I have not used those commands in a while.</p>\n\n<p>Then we moved on working with Frog. This is new concept for me to learn. It was a very interesting concept for me to learn. At first, I found it was a little confusing but after I got playing around with it and understanding the different parts within the package and the steps we had to do I found it really easy to do.</p>\n\n<p>After we moved on to getting use to git. This was a new concept for me because I have never really worked with git besides through a web browser. First we started by reading a section from pro git. This section was very helpful for to gain a better understanding of git but reading about the basics. Understanding what the different commands do and understanding what the different messages meant was a little hard but by the end of the lab I had a lot of it understood. A new skill I had a chance to practice was working with git in a command line. I am really glad I got to practice this new skill because I think it will become very helpful in the future. I also think knowing how to be able to access git from the command line is important because it makes working with it so much easier and quicker to get the information you are looking for.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-19-lab-5.md" . unix) f post (u . "Lab 5") (? . 11) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/lab-5.html" . unix) (u . "/2019/09/lab-5.html") (u . "2019-09-19T13:09:42") (? . 9) (? . 1) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Trail Recursion</h3>\n\n<p>Trail recursion<a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._tail-recursion%29\">Trail recursion</a> was an interesting concept to look at. At the beginning it was a little changeling to understand the question that was being asked. after looking at the trail recursion document and reading it through a few times it seemed to make more sense and the question became a lot easier to answer. The example on the document was really helpful for part 1 of the lab.</p>\n\n<h3>For Loops</h3>\n\n<p>The other new concept we looked at today was <a href=\"https://docs.racket-lang.org/guide/for.html\">for loops</a>. These were pretty easy to understand because they looked a lot like the for loops in java. Understand the different types of for loops like for/fold was a bit tricky. The documentation explained it really well.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<h3>For Loop</h3>\n\n<p>The for concept was a little familiar from Java and previous languages. Learning the syntax and different types were new tho. Having a base understanding of four loops made it a lot easier to understand them in Racket.</p>\n\n<h3>Range</h3>\n\n<p>Today in one of the code examples on the lab there was a function called range used. This was familiar to be because I used it on the assignment which I finished before the lab. Knowing range before had helped me understand what the code was doing a lot easier.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found the trail recursion very interesting today. It was interesting because it was a new concept but it also makes sense in practice. Being able to increment as you go is really helpful to know because it can help save stack on the stack trace and it makes things a lot faster to run.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab</h2>\n\n<p>First we copy the code provided in part 1 and observed how deep the stack trace went. Then we copied the code for odds-even2 and fixed the helper function to use trail recursion. Then we looked at for loop. We copied the code odds-even3 that used for loops instead of recursion. We then copied the function big-list to be able to compare the speeds between the three different functions. It turns out the odds-even2 was the fastest.  For part 4 we gained more practice working with trail recursion, for loops and higher order functions.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Trail Recursion</h3>\n\n<p>Trail recursion<a href=\"https://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html#%28part._tail-recursion%29\">Trail recursion</a> was an interesting concept to look at. At the beginning it was a little changeling to understand the question that was being asked. after looking at the trail recursion document and reading it through a few times it seemed to make more sense and the question became a lot easier to answer. The example on the document was really helpful for part 1 of the lab.</p>\n\n<h3>For Loops</h3>\n\n<p>The other new concept we looked at today was <a href=\"https://docs.racket-lang.org/guide/for.html\">for loops</a>. These were pretty easy to understand because they looked a lot like the for loops in java. Understand the different types of for loops like for/fold was a bit tricky. The documentation explained it really well.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<h3>For Loop</h3>\n\n<p>The for concept was a little familiar from Java and previous languages. Learning the syntax and different types were new tho. Having a base understanding of four loops made it a lot easier to understand them in Racket.</p>\n\n<h3>Range</h3>\n\n<p>Today in one of the code examples on the lab there was a function called range used. This was familiar to be because I used it on the assignment which I finished before the lab. Knowing range before had helped me understand what the code was doing a lot easier.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found the trail recursion very interesting today. It was interesting because it was a new concept but it also makes sense in practice. Being able to increment as you go is really helpful to know because it can help save stack on the stack trace and it makes things a lot faster to run.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab</h2>\n\n<p>First we copy the code provided in part 1 and observed how deep the stack trace went. Then we copied the code for odds-even2 and fixed the helper function to use trail recursion. Then we looked at for loop. We copied the code odds-even3 that used for loops instead of recursion. We then copied the function big-list to be able to compare the speeds between the three different functions. It turns out the odds-even2 was the fastest.  For part 4 we gained more practice working with trail recursion, for loops and higher order functions.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-21-lab20.md" . unix) f post (u . "Lab20") (? . 2) 1575401369 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/11/lab20.html" . unix) (u . "/2019/11/lab20.html") (u . "2019-11-21T20:30:23") (? . 6) (? . 3) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"octave\">Octave</h3>\n\n<p>In the lab most of the material was a new concept to me. I never worked with matlab or octave, so it was an interesting experience.</p>\n\n<p>A big lesson I learnt in the lab was the need for semicolons. I found out that if you do not have a semicolon at the end of setting a variable, octave will print out the variable. This caused my function <code>fib()</code> to print out the variables every time it went through the for loop.</p>\n\n<p>We used the Fibonacci series, matrices, and vectors as examples to get to know Octave and how it works. I found that Octave is a language that is good for working with numbers and graphs.</p>\n\n<h3 id=\"performance-comparison-and-measuring-cpu-time\">Performance comparison and measuring CPU time</h3>\n\n<p>Comparing performance between the two different functions in octave was an interesting topic. I thought the function <code>tic()</code> and <code>toc()</code> were really interesting. The function <code>tic()</code> started counting the time and <code>toc()</code> will stop the counting.</p>\n\n<p>When we measured the CPU time we did not use <code>tic()</code> and <code>toc()</code>. However, we did use octaves built in <code>cputime</code>.</p>\n\n<p>We found that the first function <code>fib()</code> that only used the for loop was a lot slower than the second function <code>fibmat()</code>.</p>\n\n<h3 id=\"using-the-profiler\">Using the profiler</h3>\n\n<p>The <a href=\"https://octave.org/doc/v4.0.3/Profiling.html\">profiling tool</a> was interesting to work with. The tool would tell you where your code spends most of the time. To run it you would first type <code>profile on</code> in the command line. Then you would type the function that you want to evaluate. So an example from the class would be <code>fib(1000)</code>. Once the function is done you would type <code>profile off</code>. In order to get the results from the you would have to type <code>profshow</code>. It will produce a table like the below showing the hot spot for that function.</p>\n\n<pre><code>&gt;&gt; profshow\n   #            Function Attr     Time (s)   Time (%)        Calls\n------------------------------------------------------------------\n   1                 fib             0.012      90.50            1\n   2            binary +             0.001       6.12         1001\n   5             profile             0.000       1.26            1\n   4                disp             0.000       1.00            1\n   3             display             0.000       0.89            1\n   6              nargin             0.000       0.08            1\n   8               false             0.000       0.07            1\n   7           binary !=             0.000       0.06            1\n   9 __profiler_enable__             0.000       0.00            1\n</code></pre>\n\n<p>An important thing is that you have to clear the profile each time before you use it.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In the lab there was no concepts that were familiar from my own knowledge. The only thing that I was familiar with was the Fibonacci series. Knowing the Fibonacci series helped me understand how Octave works better. I was able to understand the syntax a lot better since I knew how the problem works.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>The new skills I worked on was programming in Octave. I improved this skill because the whole lab was working in Octave. The other skills I worked on was debugging in Octave. I did this because I had a few times where the code was not working or was not printing the same output as others. Then I need to figure out why.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>During the lab I found working with Octave to be confusing to work with in the beginning. I found it to be difficult because it has been a while since I worked with matrices and vectors. It was difficult because I was trying to remember how matrices and vectors work as well as learn how a new language works as well.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we ran added code to the for loop, so the Fibonacci series would work. Then we ran test cases to make sure it produces the correct answers. In octave the test cases are written in the code as comments.</p>\n\n<p>Then, in order to run the test cases you type <code>test fib(1000)</code> in the command line in Octave. Then we looked at the Fibonacci series as matrix multiplication. We used a <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form\">well-known</a> identity about the Fibonacci numbers F(i) to help us write the code.</p>\n\n<p>Then we did a performance comparison between the two functions. We created a function called <code>timeit</code> and <code>bench</code> to measure how long it takes the function. The following is an example of how we called the <code>bench</code> function and the output. We can see that the second function <code>fibmat</code> takes a lot less time than the first method <code>fib</code>.</p>\n\n<pre><code>&gt;&gt; bench\nfib     median=0.117ms mean=0.120ms total=11960.450ms\nfibmat  median=0.024ms mean=0.024ms total=2414.605ms</code></pre>\n\n<p>Then we compared the CPU time for each function as well. We created a function called <code>ctimeit</code> and <code>cbench</code> to measure the CPU time. The following is a example of how we called the <code>cbench</code> function and the output. We can see that the second function <code>fibmat</code> takes a lot less CPU time than the first method <code>fib</code>.</p>\n\n<pre><code>&gt;&gt; cbench\nfib     median=0.119ms mean=0.125ms total=12512.951ms\nfibmat  median=0.026ms mean=0.028ms total=2771.087ms</code></pre>\n\n<p>The last thing we looked at was how to use the <a href=\"https://octave.org/doc/v4.0.3/Profiling.html\">profiling tool</a>. We used the profiler to look where the functions hotspots are. When we compared the time it took the functions we looked at the overall time. The profile tool allowed us to see how much time each call took.</p>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"octave\">Octave</h3>\n\n<p>In the lab most of the material was a new concept to me. I never worked with matlab or octave, so it was an interesting experience.</p>\n\n<p>A big lesson I learnt in the lab was the need for semicolons. I found out that if you do not have a semicolon at the end of setting a variable, octave will print out the variable. This caused my function <code>fib()</code> to print out the variables every time it went through the for loop.</p>\n\n<p>We used the Fibonacci series, matrices, and vectors as examples to get to know Octave and how it works. I found that Octave is a language that is good for working with numbers and graphs.</p>\n\n<h3 id=\"performance-comparison-and-measuring-cpu-time\">Performance comparison and measuring CPU time</h3>\n\n<p>Comparing performance between the two different functions in octave was an interesting topic. I thought the function <code>tic()</code> and <code>toc()</code> were really interesting. The function <code>tic()</code> started counting the time and <code>toc()</code> will stop the counting.</p>\n\n<p>When we measured the CPU time we did not use <code>tic()</code> and <code>toc()</code>. However, we did use octaves built in <code>cputime</code>.</p>\n\n<p>We found that the first function <code>fib()</code> that only used the for loop was a lot slower than the second function <code>fibmat()</code>.</p>\n\n<h3 id=\"using-the-profiler\">Using the profiler</h3>\n\n<p>The <a href=\"https://octave.org/doc/v4.0.3/Profiling.html\">profiling tool</a> was interesting to work with. The tool would tell you where your code spends most of the time. To run it you would first type <code>profile on</code> in the command line. Then you would type the function that you want to evaluate. So an example from the class would be <code>fib(1000)</code>. Once the function is done you would type <code>profile off</code>. In order to get the results from the you would have to type <code>profshow</code>. It will produce a table like the below showing the hot spot for that function.</p>\n\n<pre><code>&gt;&gt; profshow\n   #            Function Attr     Time (s)   Time (%)        Calls\n------------------------------------------------------------------\n   1                 fib             0.012      90.50            1\n   2            binary +             0.001       6.12         1001\n   5             profile             0.000       1.26            1\n   4                disp             0.000       1.00            1\n   3             display             0.000       0.89            1\n   6              nargin             0.000       0.08            1\n   8               false             0.000       0.07            1\n   7           binary !=             0.000       0.06            1\n   9 __profiler_enable__             0.000       0.00            1\n</code></pre>\n\n<p>An important thing is that you have to clear the profile each time before you use it.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In the lab there was no concepts that were familiar from my own knowledge. The only thing that I was familiar with was the Fibonacci series. Knowing the Fibonacci series helped me understand how Octave works better. I was able to understand the syntax a lot better since I knew how the problem works.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>The new skills I worked on was programming in Octave. I improved this skill because the whole lab was working in Octave. The other skills I worked on was debugging in Octave. I did this because I had a few times where the code was not working or was not printing the same output as others. Then I need to figure out why.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>During the lab I found working with Octave to be confusing to work with in the beginning. I found it to be difficult because it has been a while since I worked with matrices and vectors. It was difficult because I was trying to remember how matrices and vectors work as well as learn how a new language works as well.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we ran added code to the for loop, so the Fibonacci series would work. Then we ran test cases to make sure it produces the correct answers. In octave the test cases are written in the code as comments.</p>\n\n<p>Then, in order to run the test cases you type <code>test fib(1000)</code> in the command line in Octave. Then we looked at the Fibonacci series as matrix multiplication. We used a <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form\">well-known</a> identity about the Fibonacci numbers F(i) to help us write the code.</p>\n\n<p>Then we did a performance comparison between the two functions. We created a function called <code>timeit</code> and <code>bench</code> to measure how long it takes the function. The following is an example of how we called the <code>bench</code> function and the output. We can see that the second function <code>fibmat</code> takes a lot less time than the first method <code>fib</code>.</p>\n\n<pre><code>&gt;&gt; bench\nfib     median=0.117ms mean=0.120ms total=11960.450ms\nfibmat  median=0.024ms mean=0.024ms total=2414.605ms</code></pre>\n\n<p>Then we compared the CPU time for each function as well. We created a function called <code>ctimeit</code> and <code>cbench</code> to measure the CPU time. The following is a example of how we called the <code>cbench</code> function and the output. We can see that the second function <code>fibmat</code> takes a lot less CPU time than the first method <code>fib</code>.</p>\n\n<pre><code>&gt;&gt; cbench\nfib     median=0.119ms mean=0.125ms total=12512.951ms\nfibmat  median=0.026ms mean=0.028ms total=2771.087ms</code></pre>\n\n<p>The last thing we looked at was how to use the <a href=\"https://octave.org/doc/v4.0.3/Profiling.html\">profiling tool</a>. We used the profiler to look where the functions hotspots are. When we compared the time it took the functions we looked at the overall time. The profile tool allowed us to see how much time each call took.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-20-lab-18.md" . unix) f post (u . "lab 18") (? . 4) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/11/lab-18.html" . unix) (u . "/2019/11/lab-18.html") (u . "2019-11-07T07:32:16") (? . 5) (? . 6) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab we covered <strong>closures</strong>. We used closures to mimic generator code which I found a bit interesting. This topic was completely new to me. I found that after I read <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/generators.html\">chapter 6 from DiP3</a> the topics seemed a bit easier to follow. At the beginning, the topic was a bit difficult to understand. Then I found that after working on examples it became much easier to understand.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In this lab there wasn&rsquo;t any concepts that were familiar to me. This made it a little hard to follow along at the beginning of the lab but once I started to understand the material it was much easier to follow along and understand what was happening.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>I did not practice any new skills in this lab. However I did improve on my python programming skills as well as my debugging skills. I improved on my debugging skills because I made a lot of errors so I had to go through and find where the errors were. Then I had to use my previous knowledge to figure out how to fix it, I improved my python programming skills because the whole lab was coding in python.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>In the beginning I found the concept of the was a little tricky to understand. Once we finished going over the first example, it made more sense and the rest of the questions seem to be a bit easier. This helped me to really grasp the topic because I was able to understand the basic concepts when we the class discussed it more.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>The whole lab was just looking at how <strong>closures</strong> work to simulate generators and then a few examples. The first example we looked at was <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/generators.html#generators\">Counter</a>. For this example we were given the code that uses the generator. Then we had to write a function that mimics the behaviour of the other one. Below is an example of the function that we had to write.</p>\n\n<div class=\"brush: python\">\n <pre><code>def make_counter2(x):\n\tcount = x\n\tdef counter():\n\t\tnonlocal count,x\n\t\tif count ==x:\n\t\t\tprint ('Entering make_counter')\n\t\tx = x+1\n\t\treturn x-1\n\treturn counter</code></pre></div>\n\n<p>The next example we looked at is the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/generators.html#a-fibonacci-generator\">Fibonacci series</a>. Here we had to fill in the function <code>fib2</code> that will mimic the function <code>fib</code>. Below is an example of the definition for <code>fib2</code>.</p>\n\n<div class=\"brush: python\">\n <pre><code>def fib2(max):\n    a,b = 0,1\n    def next():\n        nonlocal a,b\n        if a &lt; max:\n            a , b = b, a+b\n            return b-a\n        else:\n            return None\n    return next</code></pre></div>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab we covered <strong>closures</strong>. We used closures to mimic generator code which I found a bit interesting. This topic was completely new to me. I found that after I read <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/generators.html\">chapter 6 from DiP3</a> the topics seemed a bit easier to follow. At the beginning, the topic was a bit difficult to understand. Then I found that after working on examples it became much easier to understand.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In this lab there wasn&rsquo;t any concepts that were familiar to me. This made it a little hard to follow along at the beginning of the lab but once I started to understand the material it was much easier to follow along and understand what was happening.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>I did not practice any new skills in this lab. However I did improve on my python programming skills as well as my debugging skills. I improved on my debugging skills because I made a lot of errors so I had to go through and find where the errors were. Then I had to use my previous knowledge to figure out how to fix it, I improved my python programming skills because the whole lab was coding in python.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>In the beginning I found the concept of the was a little tricky to understand. Once we finished going over the first example, it made more sense and the rest of the questions seem to be a bit easier. This helped me to really grasp the topic because I was able to understand the basic concepts when we the class discussed it more.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>The whole lab was just looking at how <strong>closures</strong> work to simulate generators and then a few examples. The first example we looked at was <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/generators.html#generators\">Counter</a>. For this example we were given the code that uses the generator. Then we had to write a function that mimics the behaviour of the other one. Below is an example of the function that we had to write.</p>\n\n<div class=\"brush: python\">\n <pre><code>def make_counter2(x):\n\tcount = x\n\tdef counter():\n\t\tnonlocal count,x\n\t\tif count ==x:\n\t\t\tprint ('Entering make_counter')\n\t\tx = x+1\n\t\treturn x-1\n\treturn counter</code></pre></div>\n\n<p>The next example we looked at is the <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/generators.html#a-fibonacci-generator\">Fibonacci series</a>. Here we had to fill in the function <code>fib2</code> that will mimic the function <code>fib</code>. Below is an example of the definition for <code>fib2</code>.</p>\n\n<div class=\"brush: python\">\n <pre><code>def fib2(max):\n    a,b = 0,1\n    def next():\n        nonlocal a,b\n        if a &lt; max:\n            a , b = b, a+b\n            return b-a\n        else:\n            return None\n    return next</code></pre></div>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-17-lab4.md" . unix) f post (u . "Lab4") (? . 7) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/lab4.html" . unix) (u . "/2019/09/lab4.html") (u . "2019-09-17T10:58:26") (? . 8) (? . 9) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<p>In lab 4 we did a lot more group discussion and demonstrations than compared to the past labs.</p>\n\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab there was a few new topics that we covered. The first one is scribble and the other one is modules in Racket.</p>\n\n<h3>Scribble</h3>\n\n<p>We looked at how to create blog using scribble. It was really interesting to learn how to combine Racket into the document. Using both Racket and scribble to create a document would be a good way to help save some work. An example that was talked about in class was using it so you no longer had to copy down the copyrights to the document. The copyrights could just be stored in a function and the document then could call the function.</p>\n\n<h3>Modules</h3>\n\n<p>Modules were another interesting topic we covered today. Modules are basically another way to write functions in one file and call them from another file in the same space. This would seem really helpful because the function can be wrote once and then called from other files. Instead of continuously writing the same function in multiple programs that use.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>I was familiar with the debugger in Dr Racket before the lab. I was familiar with it because while working on my assignment I ran into errors and used the debugger to help fix them.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skilled I practised in the lab today was working with scribble. It was a little challenging to get the code to work for the first few tries but then it slowly was easier. This is a new skill because it gives me another format I could use for writing journals.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>During the lab I read through some different material that helped understand the did situations better. \n <p>First I read the <a href=\"https://docs.racket-lang.org/scribble/getting-started.html?q=%40-syntax#%28part._how-to~3areader%29\">Racket documentation</a> to gain a better understanding of the syntax used in scribble.</p> To gain a better understanding of how modules worked, I read the <a href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._module-syntax%29\">Racket module documentation</a>. The documentation was easy to follow and answered most of the questions on how to complete part 5 of the lab.</p>") #f (u . "\n<p>In lab 4 we did a lot more group discussion and demonstrations than compared to the past labs.</p>\n\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab there was a few new topics that we covered. The first one is scribble and the other one is modules in Racket.</p>\n\n<h3>Scribble</h3>\n\n<p>We looked at how to create blog using scribble. It was really interesting to learn how to combine Racket into the document. Using both Racket and scribble to create a document would be a good way to help save some work. An example that was talked about in class was using it so you no longer had to copy down the copyrights to the document. The copyrights could just be stored in a function and the document then could call the function.</p>\n\n<h3>Modules</h3>\n\n<p>Modules were another interesting topic we covered today. Modules are basically another way to write functions in one file and call them from another file in the same space. This would seem really helpful because the function can be wrote once and then called from other files. Instead of continuously writing the same function in multiple programs that use.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>I was familiar with the debugger in Dr Racket before the lab. I was familiar with it because while working on my assignment I ran into errors and used the debugger to help fix them.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The new skilled I practised in the lab today was working with scribble. It was a little challenging to get the code to work for the first few tries but then it slowly was easier. This is a new skill because it gives me another format I could use for writing journals.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>During the lab I read through some different material that helped understand the did situations better. \n <p>First I read the <a href=\"https://docs.racket-lang.org/scribble/getting-started.html?q=%40-syntax#%28part._how-to~3areader%29\">Racket documentation</a> to gain a better understanding of the syntax used in scribble.</p> To gain a better understanding of how modules worked, I read the <a href=\"https://docs.racket-lang.org/guide/Module_Syntax.html#%28part._module-syntax%29\">Racket module documentation</a>. The documentation was easy to follow and answered most of the questions on how to complete part 5 of the lab.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-11-20-lab-19.md" . unix) f post (u . "lab 19") (? . 6) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/11/lab-19.html" . unix) (u . "/2019/11/lab-19.html") (u . "2019-11-19T07:32:27") (? . 4) (? . 2) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today&rsquo;s lab there was a lot of topics I was familiar with from previous courses. However, there were a few topics that were new to me. The topics that were new to me was <code>__inter__</code> and <code>__next__</code>. At the beginning they were difficult to understand but after reading <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/iterators.html\">DiP3 Chapter 7</a> helped me to understand them better.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>A lot of the topics in today’s lab was very familiar to me from a previous course I took. There were a few things that were not familiar when I first started working on them. As I worked through the lab and some of the documentation then everything started to come back to me. I found that having a little bit of previous knowledge made the lab easier to follow. It also allowed me to fully understand everything that was discussed in the lab.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>In this lab I did not gain any new skills. However, I did improve on a couple skills I already have. The first skill I improved was my python programming skills. I accomplished this because having the whole lab in python. I also improved writing classes in python. I improved writing classes by learning how the <code>__inter__</code> and <code>__next__</code> methods work. This will help me later on when I am writing my own classes in the future.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>During this lab I found understanding how the <code>__next__</code> method a bit difficult in the beginning. Once I got an understanding how it works, then the rest of the lab was easier to complete because I was familiar with most of the topics from a previous course.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>We started the lab with looking at <strong>Counters, generators and classes</strong>. We looked at the counter code from Lab 18 and generated the numbers by providing a compatible interface by using a <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/iterators.html#defining-classes\">python class</a>.  Then we looked at the Fibonacci series and completed the definition of <code>__next__</code> so it will act like the generator.</p>\n\n<div class=\"brush: python\">\n <pre><code>def __next__(self):\n\tif self.max &gt; self.a: \n\t\tself.a,self.b = self.b,self.a + self.b\n\t\treturn self.b-self.a\n\telse: \n\t\traise StopIteration</code></pre></div>\n\n<p>The code above shows what the <code>__next__</code> function would look like. I found it was basically just taking the closure code from the last lab which made it easy to grasp the concept of how it was done.  Then we looked <strong>object copying and equality</strong>. During this part of the lab we had to write the code for the method<a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/special-method-names.html#rich-comparisons\"> <code>__eq__</code></a>inorder for the test to pass. Then we also wrote an <code>eqal</code> method to be able to do arithmetic.  Then in the lab we used <a href=\"https://docs.python.org/3/library/copy.html\">deepCopy</a> to update one of our test sets to make sure the ‘eqal` method does not change the object self.</p>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today&rsquo;s lab there was a lot of topics I was familiar with from previous courses. However, there were a few topics that were new to me. The topics that were new to me was <code>__inter__</code> and <code>__next__</code>. At the beginning they were difficult to understand but after reading <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/iterators.html\">DiP3 Chapter 7</a> helped me to understand them better.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>A lot of the topics in today’s lab was very familiar to me from a previous course I took. There were a few things that were not familiar when I first started working on them. As I worked through the lab and some of the documentation then everything started to come back to me. I found that having a little bit of previous knowledge made the lab easier to follow. It also allowed me to fully understand everything that was discussed in the lab.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>In this lab I did not gain any new skills. However, I did improve on a couple skills I already have. The first skill I improved was my python programming skills. I accomplished this because having the whole lab in python. I also improved writing classes in python. I improved writing classes by learning how the <code>__inter__</code> and <code>__next__</code> methods work. This will help me later on when I am writing my own classes in the future.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>During this lab I found understanding how the <code>__next__</code> method a bit difficult in the beginning. Once I got an understanding how it works, then the rest of the lab was easier to complete because I was familiar with most of the topics from a previous course.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>We started the lab with looking at <strong>Counters, generators and classes</strong>. We looked at the counter code from Lab 18 and generated the numbers by providing a compatible interface by using a <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/iterators.html#defining-classes\">python class</a>.  Then we looked at the Fibonacci series and completed the definition of <code>__next__</code> so it will act like the generator.</p>\n\n<div class=\"brush: python\">\n <pre><code>def __next__(self):\n\tif self.max &gt; self.a: \n\t\tself.a,self.b = self.b,self.a + self.b\n\t\treturn self.b-self.a\n\telse: \n\t\traise StopIteration</code></pre></div>\n\n<p>The code above shows what the <code>__next__</code> function would look like. I found it was basically just taking the closure code from the last lab which made it easy to grasp the concept of how it was done.  Then we looked <strong>object copying and equality</strong>. During this part of the lab we had to write the code for the method<a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/special-method-names.html#rich-comparisons\"> <code>__eq__</code></a>inorder for the test to pass. Then we also wrote an <code>eqal</code> method to be able to do arithmetic.  Then in the lab we used <a href=\"https://docs.python.org/3/library/copy.html\">deepCopy</a> to update one of our test sets to make sure the ‘eqal` method does not change the object self.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-10-lab2.md" . unix) f post (u . "Lab2") (? . 0) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/lab2.html" . unix) (u . "/2019/09/lab2.html") (u . "2019-09-10T11:12:08") (? . 10) (? . 8) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<p>Today in the lab we covered a fair bit of material that was new to me. The first new concept that was covered was some more different git commands. We looked at how to add just specific files, seeing what has changed after a file has been added.</p>\n\n<p>Another new concept that was covered today was Racket. I have never worked with racket before and it was a little confusing but after I read some of the documentation things become pretty interesting. There was a new tool that was introduced to me as well. I have new used DrRacket so at first it was hard to grasp the different concepts. Another thing that was confusing to me was all the brackets that Racket likes. I got a lot of errors because I forgot brackets on statements. The tutorial was laid out nicely that explained things very well.</p>\n\n<p>Working with DrRacket was a very interesting concept. I was really interesting working with the interactive window part. I found it very useful if you wanted to test something simple or small or see how it works. An example would be setting up the circles.</p>\n\n<p>A familiar concept that we looked at in todays lab was git cloning and lookking at the git log. I worked with cloning in the first lab to verify that the push was successful. I also worked with git log to track the commit messages that were being made.</p>\n\n<p>Some new skills i practiced in this lab was using git. I learned a few different commands and how to best use them so I am not committing things that dont need to be committed</p>") #f (u . "\n<p>Today in the lab we covered a fair bit of material that was new to me. The first new concept that was covered was some more different git commands. We looked at how to add just specific files, seeing what has changed after a file has been added.</p>\n\n<p>Another new concept that was covered today was Racket. I have never worked with racket before and it was a little confusing but after I read some of the documentation things become pretty interesting. There was a new tool that was introduced to me as well. I have new used DrRacket so at first it was hard to grasp the different concepts. Another thing that was confusing to me was all the brackets that Racket likes. I got a lot of errors because I forgot brackets on statements. The tutorial was laid out nicely that explained things very well.</p>\n\n<p>Working with DrRacket was a very interesting concept. I was really interesting working with the interactive window part. I found it very useful if you wanted to test something simple or small or see how it works. An example would be setting up the circles.</p>\n\n<p>A familiar concept that we looked at in todays lab was git cloning and lookking at the git log. I worked with cloning in the first lab to verify that the push was successful. I also worked with git log to track the commit messages that were being made.</p>\n\n<p>Some new skills i practiced in this lab was using git. I learned a few different commands and how to best use them so I am not committing things that dont need to be committed</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-17-scribble-demo.scrbl" . unix) f post (u . "Scribble Demo") (? . 9) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/scribble-demo.html" . unix) (u . "/2019/09/scribble-demo.html") (u . "2019-09-17T12:52:22") (? . 7) (? . 11) () (u . "\n<p>Replace this with your post text. Add one or more comma-separated\nTags above. The special tag &lsquo;DRAFT&lsquo; will prevent the post from being\npublished.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">hello\n<span style=\"font-weight: bold\">Shopping</span></div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>cheese</p></li>\n  <li>\n   <p>fish</p></li>\n  <li>\n   <p>shuriken</p></li></ul></div>\n\n<div class=\"SIntrapara\">&lt;!&ndash; more &ndash;&gt;</div>") #f (u . "\n<p>Replace this with your post text. Add one or more comma-separated\nTags above. The special tag &lsquo;DRAFT&lsquo; will prevent the post from being\npublished.</p>\n\n<p></p>\n\n<div class=\"SIntrapara\">hello\n<span style=\"font-weight: bold\">Shopping</span></div>\n\n<div class=\"SIntrapara\">\n <ul>\n  <li>\n   <p>cheese</p></li>\n  <li>\n   <p>fish</p></li>\n  <li>\n   <p>shuriken</p></li></ul></div>\n\n<div class=\"SIntrapara\">&lt;!&ndash; more &ndash;&gt;</div>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-15-lab-12.md" . unix) f post (u . "Lab 12") (? . 12) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-12.html" . unix) (u . "/2019/10/lab-12.html") (u . "2019-10-15T10:28:36") (? . 13) (? . 14) (c (u . "Author: Cassandra Wendlandt")) (u . "\n<h1 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h1>\n\n<p>This lab was mainly about completing the project The Robot from <a href=\"http://eloquentjavascript.net/07_robot.html\">Chapter 7</a> of the Eloquent JavaScript. We were introduced to <strong>Spy</strong> to use it as as tool to intercept calls to <code>console.log</code> . Spy is to be used when methods are terrible to test because they do not return anything. This allows you to be able to test the source code without actually changing the source code. Spys essentially replaces <code>console.log</code>. Another new concept was <code>class</code> in JavaScript. They seem to work very similar was the classes in java which made it easier to understand what is going on.</p>\n\n<h1 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h1>\n\n<p>There was not a lot of concepts that were familiar from other course or from my own knowledge.</p>\n\n<h1 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h1>\n\n<p>I did not practice any new skills. However I did practice writing test cases in jasmine. I did this by having to write the test cases for each method that was added to ensure it worked.</p>\n\n<h1 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h1>\n\n<p>I found the ideas about spy’s to be pretty interesting. I found them to be interesting because it was a different way to test functions that did not return anything. They seem like they would be useful in testing things later on.</p>\n\n<h1 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h1>\n\n<p>First we started with representing a graph. This was done by going to <a href=\"https://eloquentjavascript.net/07_robot.html#h_UmFK5fYed8\">Meadowfield</a> and copying the code. Then we created jasmine test cases to test the code that we copied. Then we copy the <code>VillageState</code> class from <a href=\"https://eloquentjavascript.net/07_robot.html#h_oekYfM5x02\">Eloquent JavaScript</a>. Next we created jasmine test cases for the class. In order to do this we took the suggested output from chapter 7 and converted it into jasmine test cases. We had to add some extra cases in order to get full test coverage. Next we moved on to work with Spy’s. We read the <a href=\"https://jasmine.github.io/tutorials/your_first_suite#section-Spies:_%3Ccode%3EcreateSpy%3C/code%3E\">documentation</a> on it quickly. We used spy’s to test the random robot section of the code.</p>") #f (u . "\n<h1 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h1>\n\n<p>This lab was mainly about completing the project The Robot from <a href=\"http://eloquentjavascript.net/07_robot.html\">Chapter 7</a> of the Eloquent JavaScript. We were introduced to <strong>Spy</strong> to use it as as tool to intercept calls to <code>console.log</code> . Spy is to be used when methods are terrible to test because they do not return anything. This allows you to be able to test the source code without actually changing the source code. Spys essentially replaces <code>console.log</code>. Another new concept was <code>class</code> in JavaScript. They seem to work very similar was the classes in java which made it easier to understand what is going on.</p>\n\n<h1 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h1>\n\n<p>There was not a lot of concepts that were familiar from other course or from my own knowledge.</p>\n\n<h1 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h1>\n\n<p>I did not practice any new skills. However I did practice writing test cases in jasmine. I did this by having to write the test cases for each method that was added to ensure it worked.</p>\n\n<h1 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h1>\n\n<p>I found the ideas about spy’s to be pretty interesting. I found them to be interesting because it was a different way to test functions that did not return anything. They seem like they would be useful in testing things later on.</p>\n\n<h1 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h1>\n\n<p>First we started with representing a graph. This was done by going to <a href=\"https://eloquentjavascript.net/07_robot.html#h_UmFK5fYed8\">Meadowfield</a> and copying the code. Then we created jasmine test cases to test the code that we copied. Then we copy the <code>VillageState</code> class from <a href=\"https://eloquentjavascript.net/07_robot.html#h_oekYfM5x02\">Eloquent JavaScript</a>. Next we created jasmine test cases for the class. In order to do this we took the suggested output from chapter 7 and converted it into jasmine test cases. We had to add some extra cases in order to get full test coverage. Next we moved on to work with Spy’s. We read the <a href=\"https://jasmine.github.io/tutorials/your_first_suite#section-Spies:_%3Ccode%3EcreateSpy%3C/code%3E\">documentation</a> on it quickly. We used spy’s to test the random robot section of the code.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-08-lab-9.md" . unix) f post (u . "Lab 9") (? . 20) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-9.html" . unix) (u . "/2019/10/lab-9.html") (u . "2019-10-08T17:12:03") (? . 15) (? . 16) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In this lab we continued looking JavaScript. This concepts covered in the lab was all new concept from me.</p>\n\n<h3>JavaScript</h3>\n\n<p>In this lab we looked at creating functions in JavaScript and using modules. This was an interesting section because it a lot of things were very similar to racket and java. Creating functions was very similar to the way they are done in java. Creating the modules were very similar to the way it was done in racket.</p>\n\n<h3>Jasmine</h3>\n\n<p>The next new thing we covered was jasmine. This is a unit testing tool that is used. This was a very interesting thing to cover because it is always nice to find other tools that can be used to help test the code.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>There was nothing that was too familiar in this lab. The structure of JavaScript was familiar from racket and java. This familiar structure made it easier to gain a basic understanding of javascript.  I was also familiar with recursion from the past coding languages. Having the past knowledge made applying recursion in java script a lot easier to understand.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>Some new skills I practiced was coding in JavaScript and testing through different tools.  The skills in JavaScript was practiced by having the whole lab be based on coding in Javascript.  The testing skills were practiced by using jasmine to run different test cases. What specific details did you find surprising, interesting, confusing, difficult, or otherwise important? I found the close similarities to Java and racket very interesting. It made the process of learning the new language a lot easier to begin.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at the \n <b>JavaScript equality</b> and type coercion. During this we looked different statements that use <code>==</code> and looked at the results.  Then we looked at \n <b>JavaScript functions</b>. We read <a href=\"http://eloquentjavascript.net/03_functions.html\">JavaScript function</a> to help gain a better understanding of what they are.These are outlined very similar to the way the functions that are in Java which made it easier to understand.  After we looked at \n <b>Node.js modules</b>. This was a very similar way of setting up modules as racket did. For this section we quickly read <a href=\"http://eloquentjavascript.net/10_modules.html\">chapter 10</a> of the JavaScript book to gain a better understanding of modules in JavaScript. After we looked at Jasmine. First I read the <a href=\"https://jasmine.github.io/index.html\">documentation</a> and the <a href=\"https://jasmine.github.io/tutorials/your_first_suite\">tutorial</a> to git better understanding of how the unit testing framework. Then we moved to testing to see how it worked with creating small simple unit test cases. FInally we looked at \n <b>recursion in JavaScript</b>. This was a very similar to racket and Java.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In this lab we continued looking JavaScript. This concepts covered in the lab was all new concept from me.</p>\n\n<h3>JavaScript</h3>\n\n<p>In this lab we looked at creating functions in JavaScript and using modules. This was an interesting section because it a lot of things were very similar to racket and java. Creating functions was very similar to the way they are done in java. Creating the modules were very similar to the way it was done in racket.</p>\n\n<h3>Jasmine</h3>\n\n<p>The next new thing we covered was jasmine. This is a unit testing tool that is used. This was a very interesting thing to cover because it is always nice to find other tools that can be used to help test the code.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>There was nothing that was too familiar in this lab. The structure of JavaScript was familiar from racket and java. This familiar structure made it easier to gain a basic understanding of javascript.  I was also familiar with recursion from the past coding languages. Having the past knowledge made applying recursion in java script a lot easier to understand.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>Some new skills I practiced was coding in JavaScript and testing through different tools.  The skills in JavaScript was practiced by having the whole lab be based on coding in Javascript.  The testing skills were practiced by using jasmine to run different test cases. What specific details did you find surprising, interesting, confusing, difficult, or otherwise important? I found the close similarities to Java and racket very interesting. It made the process of learning the new language a lot easier to begin.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at the \n <b>JavaScript equality</b> and type coercion. During this we looked different statements that use <code>==</code> and looked at the results.  Then we looked at \n <b>JavaScript functions</b>. We read <a href=\"http://eloquentjavascript.net/03_functions.html\">JavaScript function</a> to help gain a better understanding of what they are.These are outlined very similar to the way the functions that are in Java which made it easier to understand.  After we looked at \n <b>Node.js modules</b>. This was a very similar way of setting up modules as racket did. For this section we quickly read <a href=\"http://eloquentjavascript.net/10_modules.html\">chapter 10</a> of the JavaScript book to gain a better understanding of modules in JavaScript. After we looked at Jasmine. First I read the <a href=\"https://jasmine.github.io/index.html\">documentation</a> and the <a href=\"https://jasmine.github.io/tutorials/your_first_suite\">tutorial</a> to git better understanding of how the unit testing framework. Then we moved to testing to see how it worked with creating small simple unit test cases. FInally we looked at \n <b>recursion in JavaScript</b>. This was a very similar to racket and Java.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-09-24-lab6.md" . unix) f post (u . "Lab6") (? . 1) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/09/lab6.html" . unix) (u . "/2019/09/lab6.html") (u . "2019-09-24T10:00:15") (? . 11) (? . 17) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Explorer</h3>\n\n<p>One of the new things that I learned this lab was the explorer. Using the explorer reminded me of using visual debuggers in other program languages. You were able to see what was in the list. This would allow you to be able to see what is stored in the list. I think this was a very interesting concept to learned because it seems like it would be a very helpful tool for debugging. Having a separate window open with the list of variables visible would be really helpful when trying to understand what the code is doing. Another thing I learned to go with has tables is the function this which allows you to print out what you have highlighted in the explorer.</p>\n\n<h3>Plotting</h3>\n\n<p>Plotting was another new thing I learned in the lab today. This concept would be helpful for unit test cases to be able to check the behaviour of the code. The plotting is also useful for watching specific variables change as you change other variables. I feel that plotting would also be good for testing where the output is defined by the input.</p>\n\n<h3>Hash Table functions</h3>\n\n<p>Before the lab I had a familiar sense of <code>Hash Tables</code> from other programming languages but during the lab I learned a lot of new functions that Racket uses. The first interesting thing found was that the period on <code>define (census . list)</code> means that it takes all the inputs and combines them into a list. This seems like a really interesting and helpful tool to use when it comes to doing assignments.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>Before the lab I had some knowledge on \n <b>hash tables</b> from other programming languages. This helped make things click a lot faster and understand what the different functions could do.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The skills that I got to practice during this lab was my debugging skills. More importantly I got to practice using tools to be able to understand the behaviour of the code.  I also got to practice working with tail recursion and cons.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we worked with hash tables. We had to fill in the accumulator in the code that was provided in the lab instructions.  Then we moved to work with explorer and ran a few different commands to see how it worked.  After we worked with plotting. In this section we had to plot the difference between <code>(deriv sin x)</code> and <code>(cos x)</code>.  Finally we moved to work with JSON and writing a function to collect all the statuses from the <code>errors.json</code> file.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3>Explorer</h3>\n\n<p>One of the new things that I learned this lab was the explorer. Using the explorer reminded me of using visual debuggers in other program languages. You were able to see what was in the list. This would allow you to be able to see what is stored in the list. I think this was a very interesting concept to learned because it seems like it would be a very helpful tool for debugging. Having a separate window open with the list of variables visible would be really helpful when trying to understand what the code is doing. Another thing I learned to go with has tables is the function this which allows you to print out what you have highlighted in the explorer.</p>\n\n<h3>Plotting</h3>\n\n<p>Plotting was another new thing I learned in the lab today. This concept would be helpful for unit test cases to be able to check the behaviour of the code. The plotting is also useful for watching specific variables change as you change other variables. I feel that plotting would also be good for testing where the output is defined by the input.</p>\n\n<h3>Hash Table functions</h3>\n\n<p>Before the lab I had a familiar sense of <code>Hash Tables</code> from other programming languages but during the lab I learned a lot of new functions that Racket uses. The first interesting thing found was that the period on <code>define (census . list)</code> means that it takes all the inputs and combines them into a list. This seems like a really interesting and helpful tool to use when it comes to doing assignments.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>Before the lab I had some knowledge on \n <b>hash tables</b> from other programming languages. This helped make things click a lot faster and understand what the different functions could do.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>The skills that I got to practice during this lab was my debugging skills. More importantly I got to practice using tools to be able to understand the behaviour of the code.  I also got to practice working with tail recursion and cons.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we worked with hash tables. We had to fill in the accumulator in the code that was provided in the lab instructions.  Then we moved to work with explorer and ran a few different commands to see how it worked.  After we worked with plotting. In this section we had to plot the difference between <code>(deriv sin x)</code> and <code>(cos x)</code>.  Finally we moved to work with JSON and writing a function to collect all the statuses from the <code>errors.json</code> file.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-12-03-lab-23.md" . unix) f post (u . "Lab 23") (? . 23) 1575421759 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/12/lab-23.html" . unix) (u . "/2019/12/lab-23.html") (u . "2019-12-03T20:36:07") (? . 18) #f () (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab we focused mainly on <strong>manipulating photos</strong>. Using Octave to manipulate photos was a new concept to me. We covered how to turn a photo black and white, applying gradient to a photo and added a yellow tint to them. It was a very interesting topic to explore. It was also a very confusing to follow the lab in the beginning</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>There was no concepts that were familiar to be from previous courses or my own knowledge. This made the lab a bit tricky to follow along. I kept getting lost in what was being explained it was hard to catch up.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>In this lab I did not practice any new skills. I did however improve on my octave programming skills and my debugging skills. My octave programming skills were improved because the whole lab was programming in octave. One thing I have improved with this lab was working with vectors and arrays in octave. My debugging skills were improved because I came across some errors I had to solve.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found this lab pretty hard to follow along. I found the topics were very hard to follow and understand. It think the hardest thing for me to understand is how everything works in octave. This is the first time I ever worked with Octave and I found that I am having an extremely hard time understanding it and how it works.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at <strong>broadcasting</strong>. We read a broadcasting section that is in the <a href=\"https://octave.org/doc/v4.0.3/Broadcasting.html\">octave documentation</a> ** add link** to help gain a better understanding of the topic.</p>\n\n<p>Then we moved on and looked at <strong>reshaping arrays</strong>. In this part we ran the two lines of code that is below in the command window. Then we looked at the result to get a sense of of the method <code>reshape</code> works so we can use it later in the lab.</p>\n\n<pre><code>ones(3,3,3) .* reshape([1,2,3],[1,1,3])\nones(3,3,3) .* reshape([1,2,3],[1,3,1])</code></pre>\n\n<p>Next we looked at <strong>scaling layers of arrays</strong>. In the section we took a black and white photo and added a yellow tint to it. We had to fill in the function <code>scale_layers</code>. Below is what the function would look like.</p>\n\n<pre><code>function out = scale_layers(array, weights)\n  out = array .* reshape(weights,[1,1,3]);\nendfunction</code></pre>\n\n<p>After we looked at <strong>converting to monochrome</strong>. In this section we took a photo of an owl and applied the following method to it. Below is the function we had to fill in to have the photo transferred into monochrome.</p>\n\n<pre><code>function out = monochrome(in, weights=[0.21,0.72,0.07])\n  out = sum(scale_layers(in,weights), 3);\nendfunction</code></pre>\n\n<p>The last thing we looked at was <strong>changing the gradient</strong> or the amount of intensity of a photo. We ran some sample code quickly to get an understanding how the function <code>gradient</code> works. Then we filled in the following function to display the owl picture using the <code>norming</code> function.</p>\n\n<pre><code>function normimg = normgrad(img)\n  [Dx, Dy] = gradient(img);\n  normimg = sqrt(Dx.^2 + Dy.^2);\nendfunction</code></pre>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In today’s lab we focused mainly on <strong>manipulating photos</strong>. Using Octave to manipulate photos was a new concept to me. We covered how to turn a photo black and white, applying gradient to a photo and added a yellow tint to them. It was a very interesting topic to explore. It was also a very confusing to follow the lab in the beginning</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>There was no concepts that were familiar to be from previous courses or my own knowledge. This made the lab a bit tricky to follow along. I kept getting lost in what was being explained it was hard to catch up.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>In this lab I did not practice any new skills. I did however improve on my octave programming skills and my debugging skills. My octave programming skills were improved because the whole lab was programming in octave. One thing I have improved with this lab was working with vectors and arrays in octave. My debugging skills were improved because I came across some errors I had to solve.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found this lab pretty hard to follow along. I found the topics were very hard to follow and understand. It think the hardest thing for me to understand is how everything works in octave. This is the first time I ever worked with Octave and I found that I am having an extremely hard time understanding it and how it works.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at <strong>broadcasting</strong>. We read a broadcasting section that is in the <a href=\"https://octave.org/doc/v4.0.3/Broadcasting.html\">octave documentation</a> ** add link** to help gain a better understanding of the topic.</p>\n\n<p>Then we moved on and looked at <strong>reshaping arrays</strong>. In this part we ran the two lines of code that is below in the command window. Then we looked at the result to get a sense of of the method <code>reshape</code> works so we can use it later in the lab.</p>\n\n<pre><code>ones(3,3,3) .* reshape([1,2,3],[1,1,3])\nones(3,3,3) .* reshape([1,2,3],[1,3,1])</code></pre>\n\n<p>Next we looked at <strong>scaling layers of arrays</strong>. In the section we took a black and white photo and added a yellow tint to it. We had to fill in the function <code>scale_layers</code>. Below is what the function would look like.</p>\n\n<pre><code>function out = scale_layers(array, weights)\n  out = array .* reshape(weights,[1,1,3]);\nendfunction</code></pre>\n\n<p>After we looked at <strong>converting to monochrome</strong>. In this section we took a photo of an owl and applied the following method to it. Below is the function we had to fill in to have the photo transferred into monochrome.</p>\n\n<pre><code>function out = monochrome(in, weights=[0.21,0.72,0.07])\n  out = sum(scale_layers(in,weights), 3);\nendfunction</code></pre>\n\n<p>The last thing we looked at was <strong>changing the gradient</strong> or the amount of intensity of a photo. We ran some sample code quickly to get an understanding how the function <code>gradient</code> works. Then we filled in the following function to display the owl picture using the <code>norming</code> function.</p>\n\n<pre><code>function normimg = normgrad(img)\n  [Dx, Dy] = gradient(img);\n  normimg = sqrt(Dx.^2 + Dy.^2);\nendfunction</code></pre>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-17-lab-13.md" . unix) f post (u . "Lab 13") (? . 14) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-13.html" . unix) (u . "/2019/10/lab-13.html") (u . "2019-10-17T10:49:53") (? . 12) (? . 19) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h1 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h1>\n\n<p>During this lab we looked at <strong>timers</strong> and <strong>animations</strong>. These were fairly new topics to me as I have not seen them much. It was really neat to see how the animation ran while using the robot example from <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L12/\">lab 12</a>. Setting the time interval was a brand new concept to me. Using the <code>timer = setInterval (frame, 300)</code> seemed a lot easier to understand than the <code>setTimeout(function () {loop (i-1, str+”*”): }, 1000);</code> to understand. It seemed easier to understand because you can easily place what is what by looking at it right away. They only bad thing about it, is that you need to remember to have a <code>clearInterval</code> so it does not run forever.</p>\n\n<h1 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h1>\n\n<p>There was not any concepts that I was familiar with from other courses or my own knowledge this time around.</p>\n\n<h1 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h1>\n\n<p>The new skills that I practiced was my debugging skills, JavaScript programming skills, and problem solving skills. I practiced my debugging skills by having to work through the errors that was given and try to fix them. There were a few problems that I could not get so I asked my classmates and they helped solve them and showed me new debugging techniques. By working with through my problems and getting my classmates help I practiced my problem solving skills. I improved my JavaScript coding skills since the whole lab was completed in JavaScript.</p>\n\n<h1 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h1>\n\n<p>I found the animation part of the lab to be very interesting. It was cool to see a visual representation of the robot moving around the screen. I found this interesting because I find anything that is interactive or just constantly active for a set time to be very interesting.</p>\n\n<h1 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h1>\n\n<p>First we looked at <strong>timers</strong>. We had to run the provided code. While doing this we noticed that it was not 100 % correct since all done was being printed before the animation is actually complete. We then had to make changes to the code in order for it to work properly. The changes we made was putting the print statement into an else statement with the timer.  Then we implemented another timer. This one did not use recursion like the previous one.  After that the lab was just about setting up the <strong>animation</strong> for the robot exercise that is in <a href=\"http://eloquentjavascript.net/07_robot.html\">chapter 7</a> of Eloquent JavaScript and from last lab as well.</p>") #f (u . "\n<h1 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h1>\n\n<p>During this lab we looked at <strong>timers</strong> and <strong>animations</strong>. These were fairly new topics to me as I have not seen them much. It was really neat to see how the animation ran while using the robot example from <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/labs/L12/\">lab 12</a>. Setting the time interval was a brand new concept to me. Using the <code>timer = setInterval (frame, 300)</code> seemed a lot easier to understand than the <code>setTimeout(function () {loop (i-1, str+”*”): }, 1000);</code> to understand. It seemed easier to understand because you can easily place what is what by looking at it right away. They only bad thing about it, is that you need to remember to have a <code>clearInterval</code> so it does not run forever.</p>\n\n<h1 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h1>\n\n<p>There was not any concepts that I was familiar with from other courses or my own knowledge this time around.</p>\n\n<h1 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h1>\n\n<p>The new skills that I practiced was my debugging skills, JavaScript programming skills, and problem solving skills. I practiced my debugging skills by having to work through the errors that was given and try to fix them. There were a few problems that I could not get so I asked my classmates and they helped solve them and showed me new debugging techniques. By working with through my problems and getting my classmates help I practiced my problem solving skills. I improved my JavaScript coding skills since the whole lab was completed in JavaScript.</p>\n\n<h1 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h1>\n\n<p>I found the animation part of the lab to be very interesting. It was cool to see a visual representation of the robot moving around the screen. I found this interesting because I find anything that is interactive or just constantly active for a set time to be very interesting.</p>\n\n<h1 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h1>\n\n<p>First we looked at <strong>timers</strong>. We had to run the provided code. While doing this we noticed that it was not 100 % correct since all done was being printed before the animation is actually complete. We then had to make changes to the code in order for it to work properly. The changes we made was putting the print statement into an else statement with the timer.  Then we implemented another timer. This one did not use recursion like the previous one.  After that the lab was just about setting up the <strong>animation</strong> for the robot exercise that is in <a href=\"http://eloquentjavascript.net/07_robot.html\">chapter 7</a> of Eloquent JavaScript and from last lab as well.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-08-lab-10.md" . unix) f post (u . "Lab 10") (? . 16) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-10.html" . unix) (u . "/2019/10/lab-10.html") (u . "2019-10-08T17:12:16") (? . 20) (? . 13) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In this lab working with \n <b>JavaScript objects</b> was a new concept. It was interesting to see that the JavaScript objects were similar to the hash table in Racket. The next new concept was \n <b>Deep Comparison</b>. This was a were we had to write a method to compare the values of the object's actual properties. The next new concept was \n <b>JavaScript Arrays</b>. These were very similar to arrays that are used in Java.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In this lab there was not anything that was super familiar. The concept of JavaScript arrays were similar to those in Java. This helped made learning JavaScript arrays a lot easier to understand. Also having background knowledge of how arrays work too was very helpful to understand JavaScript arrays.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>I practiced my coding skills in JavaScript. This was done by working with arrays in JavaScript and objects within JavaScript.  I also practiced my testing skills. This was done by working with jasmine in the lab to test the methods that have been created to make sure they actually worked.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found how JavaScript concepts that were covered in today&rsquo;s lab was very similar to others languages we learnt in the past very interesting. It made understanding those concepts a lot easier.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First there were some background readings ton JavaScript and function arguments.  Then we moved on to \n <b>JavaScript objects</b>. Here we did a quick reading on what <a href=\"http://eloquentjavascript.net/04_data.html#h_cqg63Sxe3o\">JavaScript</a> objects were. Then we moved to do a quick demonstrations about JavaScript objects.  Next topic covered was \n <b>deep comparison</b>. We had to follow the deep comparison <a href=\"http://eloquentjavascript.net/04_data.html#i_IJBU+aXOIC\">exercise</a> from the following link.  Next topic covered was \n <b>JavaScript arrays</b>. Here we read a section from the link on what the <a href=\"http://eloquentjavascript.net/04_data.html#h_HjL/otjEJn\">JavaScript arrays</a> were. Then we had some practice working with JavaScript arrays. we had to follow the steps to the sum of the range exercise to write a sum function that passes all the tests that were provided in the lab instructions. Finally we covered \n <b>variadic functions</b>.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In this lab working with \n <b>JavaScript objects</b> was a new concept. It was interesting to see that the JavaScript objects were similar to the hash table in Racket. The next new concept was \n <b>Deep Comparison</b>. This was a were we had to write a method to compare the values of the object's actual properties. The next new concept was \n <b>JavaScript Arrays</b>. These were very similar to arrays that are used in Java.</p>\n\n<h2>What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In this lab there was not anything that was super familiar. The concept of JavaScript arrays were similar to those in Java. This helped made learning JavaScript arrays a lot easier to understand. Also having background knowledge of how arrays work too was very helpful to understand JavaScript arrays.</p>\n\n<h2>What new skills did you practice?</h2>\n\n<p>I practiced my coding skills in JavaScript. This was done by working with arrays in JavaScript and objects within JavaScript.  I also practiced my testing skills. This was done by working with jasmine in the lab to test the methods that have been created to make sure they actually worked.</p>\n\n<h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found how JavaScript concepts that were covered in today&rsquo;s lab was very similar to others languages we learnt in the past very interesting. It made understanding those concepts a lot easier.</p>\n\n<h2>What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First there were some background readings ton JavaScript and function arguments.  Then we moved on to \n <b>JavaScript objects</b>. Here we did a quick reading on what <a href=\"http://eloquentjavascript.net/04_data.html#h_cqg63Sxe3o\">JavaScript</a> objects were. Then we moved to do a quick demonstrations about JavaScript objects.  Next topic covered was \n <b>deep comparison</b>. We had to follow the deep comparison <a href=\"http://eloquentjavascript.net/04_data.html#i_IJBU+aXOIC\">exercise</a> from the following link.  Next topic covered was \n <b>JavaScript arrays</b>. Here we read a section from the link on what the <a href=\"http://eloquentjavascript.net/04_data.html#h_HjL/otjEJn\">JavaScript arrays</a> were. Then we had some practice working with JavaScript arrays. we had to follow the steps to the sum of the range exercise to write a sum function that passes all the tests that were provided in the lab instructions. Finally we covered \n <b>variadic functions</b>.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-01-lab-8.md" . unix) f post (u . "Lab 8") (? . 15) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-8.html" . unix) (u . "/2019/10/lab-8.html") (u . "2019-10-01T10:51:44") (? . 17) (? . 20) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>This lab was mainly focused around JavaScript. JavaScript was a new language for me to learn today. In the lab it was really helpful to have the background knowledge of Java because it made things a lot easier to understand. It was also helpful knowing racket because there was a lot of shortcut ways of do things that you could not do in Java.   \n <h2>What concepts are familiar from other courses or from your own knowledge?</h2>  There was nothing that I knew from the past used that was used in this lab. However my knowledge of Java really helped to understand JavaScript a lot easier. It also helped me pick up on the JavaScript syntax.   \n <h2>What new skills did you practice?</h2> Some new skills I practiced today was using debugging in JavaScript. Another skill I practiced was coding in JavaScript. The skills I practiced today are going to become helpful throughout the course as we more more into JavaScript stuff.   \n <h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2> In this lab, I found the \n <b>VSCodium</b> really interesting. It seems like it would be very handy to debug the JavaScript in. I also found trying to solve the JavaScript problems really interesting. It was interesting to see the different ways that they could be solved.   \n <h2>What explicit tasks (e.g. reading) were you given during this lab?</h2> In this lab we started working with JavaScript. First we started with understanding a little about JavaScript by reading a few different links posted in the lab. Then there was a demonstration on how to use VSCodium. During the demonstration we were also shown that in order to run JavaScript through the terminal, we use <code>node hello-world.js</code> . Then we used JavaScript to translate some Racket expressions. Then finally we looked at two coding problems in JavaScript.</p>") #f (u . "\n<h2>What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>This lab was mainly focused around JavaScript. JavaScript was a new language for me to learn today. In the lab it was really helpful to have the background knowledge of Java because it made things a lot easier to understand. It was also helpful knowing racket because there was a lot of shortcut ways of do things that you could not do in Java.   \n <h2>What concepts are familiar from other courses or from your own knowledge?</h2>  There was nothing that I knew from the past used that was used in this lab. However my knowledge of Java really helped to understand JavaScript a lot easier. It also helped me pick up on the JavaScript syntax.   \n <h2>What new skills did you practice?</h2> Some new skills I practiced today was using debugging in JavaScript. Another skill I practiced was coding in JavaScript. The skills I practiced today are going to become helpful throughout the course as we more more into JavaScript stuff.   \n <h2>What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2> In this lab, I found the \n <b>VSCodium</b> really interesting. It seems like it would be very handy to debug the JavaScript in. I also found trying to solve the JavaScript problems really interesting. It was interesting to see the different ways that they could be solved.   \n <h2>What explicit tasks (e.g. reading) were you given during this lab?</h2> In this lab we started working with JavaScript. First we started with understanding a little about JavaScript by reading a few different links posted in the lab. Then there was a demonstration on how to use VSCodium. During the demonstration we were also shown that in order to run JavaScript through the terminal, we use <code>node hello-world.js</code> . Then we used JavaScript to translate some Racket expressions. Then finally we looked at two coding problems in JavaScript.</p>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-29-lab-15.md" . unix) f post (u . "Lab 15") (? . 21) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-15.html" . unix) (u . "/2019/10/lab-15.html") (u . "2019-10-29T09:58:42") (? . 19) (? . 22) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"global-variables-from-files\">Global variables from files</h3>\n\n<p>In this lab I learnt that you could use a global variable from the file for the test cases or in other files. To import a global variable the line of code we used was <code>from filename import variable</code>. This would make testing easier when it is hard to return variables that depends on what was called in the past.</p>\n\n<h3 id=\"pytest-commands\">Pytest commands</h3>\n\n<p>In this lab we learnt some new commands that will show the coverage of the python program. The first new one we looked at was <code>pytest-3 --cov = rpn</code>. This command will produce a summary of the statements in the file rpn. It will provide the number of statements that were missed if there is any. It will also tell you the percentage of coverage for the file. The other pytest command we looked at was <code>pytest-3 --cov=rpn --cov-report=term-missing</code>. This command will display all the same information as the previous one but it also list any lines that were missed.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>The most familiar concept for this lab was programming in python. The overall base of the lab was really easy to follow along with since I already had a base knowledge in python from a previous course.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>There was not any new skills that I really practiced. However, I did improve on my testing skills. This was done by learning the pytest commands. Knowing these commands will help ensure that I can get full coverage.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>In today’s lab I found the new commands for pytest to be the most interesting. I think the pytest commands were the most interesting because it will be very helpful later on when checking for full test coverage. I also found the lab easy to follow along which was really nice because it allowed me to be able to focus more on what was being said.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at the <strong>reverse polish notation calculator</strong> problem described in <a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">wikipedia</a>. Then we started programming it. First we got the stack set up to store the numbers. Then we looked at the different pytest commands that may become helpful in test. Then we moved on to adding <code>if elif else</code> to the function to test if any arithmetic needs to be done. Once that was done we looked at improving the robustness of the tests. In this section of the lab we added and <code>elif</code> to the method to handle when <code>\"clear”</code> is passed through. When clear is passed through it will empty the stack of numbers. Then we added <code>elif</code> to check for <code>\"dup” “pop” “swap”</code>. Once we got those methods implemented we added an <code>elif</code> to check to see if <code>”print”</code> is passed through then prints the last element in the stack. Then we worked added a method to handle if a string of operations is passed through to go through and complete them in order.</p>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"global-variables-from-files\">Global variables from files</h3>\n\n<p>In this lab I learnt that you could use a global variable from the file for the test cases or in other files. To import a global variable the line of code we used was <code>from filename import variable</code>. This would make testing easier when it is hard to return variables that depends on what was called in the past.</p>\n\n<h3 id=\"pytest-commands\">Pytest commands</h3>\n\n<p>In this lab we learnt some new commands that will show the coverage of the python program. The first new one we looked at was <code>pytest-3 --cov = rpn</code>. This command will produce a summary of the statements in the file rpn. It will provide the number of statements that were missed if there is any. It will also tell you the percentage of coverage for the file. The other pytest command we looked at was <code>pytest-3 --cov=rpn --cov-report=term-missing</code>. This command will display all the same information as the previous one but it also list any lines that were missed.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>The most familiar concept for this lab was programming in python. The overall base of the lab was really easy to follow along with since I already had a base knowledge in python from a previous course.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>There was not any new skills that I really practiced. However, I did improve on my testing skills. This was done by learning the pytest commands. Knowing these commands will help ensure that I can get full coverage.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>In today’s lab I found the new commands for pytest to be the most interesting. I think the pytest commands were the most interesting because it will be very helpful later on when checking for full test coverage. I also found the lab easy to follow along which was really nice because it allowed me to be able to focus more on what was being said.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First we looked at the <strong>reverse polish notation calculator</strong> problem described in <a href=\"https://en.wikipedia.org/wiki/Reverse_Polish_notation\">wikipedia</a>. Then we started programming it. First we got the stack set up to store the numbers. Then we looked at the different pytest commands that may become helpful in test. Then we moved on to adding <code>if elif else</code> to the function to test if any arithmetic needs to be done. Once that was done we looked at improving the robustness of the tests. In this section of the lab we added and <code>elif</code> to the method to handle when <code>\"clear”</code> is passed through. When clear is passed through it will empty the stack of numbers. Then we added <code>elif</code> to check for <code>\"dup” “pop” “swap”</code>. Once we got those methods implemented we added an <code>elif</code> to check to see if <code>”print”</code> is passed through then prints the last element in the stack. Then we worked added a method to handle if a string of operations is passed through to go through and complete them in order.</p>")) ((? . 18) f post (u . "Lab 22") (? . 18) 1575425995 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/12/lab-22.html" . unix) (u . "/2019/12/lab-22.html") (u . "2019-12-03T20:35:46") (? . 3) (? . 23) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In this lab there were a lot of new concepts to me. One of the new topics was <strong>variable-length argument list</strong>. It was an interesting concept because some of the old ideas from previous topics were used as reference. We learnt that the function <code>varargin</code> provides similar functionality to the <code>.rest</code> argument in racket or the <code>...rest</code> function in JavaScript. This made it a bit easier to understand the main concept of the function.</p>\n\n<p>The other new concept was the <strong>k nearest neighbour</strong> algorithm. Here we read a bit about the <a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\">k nearest neighbour</a> to better understand it. This was a neat concept because it was different compared to the other topics we have been looking at. It was also easier to understand this concept because I could easily rely it to a real world scenario.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In this lab there were no concepts that were familiar to me from other courses or my own knowledge. There were topics that I should’ve known, like the linear algebra stuff since I did take a previous class on it.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>I did not learn any new skills. I did however practice my octave programming skills and my debugging skills. I practiced my octave programming skills because the whole lab was working in octave. I also improved my debugging skills because when I find out what caused my errors through the lab.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found this lab to be particularly difficult because there was a lot of concepts that we should know from the course <strong>linear algebra</strong>. This made it difficult because it&rsquo;s been a while since I took linear algebra. This meant in the lab I was trying to relearn linear algebra and the new material at the same time.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First topic we looked at in the lab was cell arrays. In this section we looked at using the cell arrays as a list of vectors. Below is the few commands we used to get a better understanding on how it works.</p>\n\n<pre><code>data = [0,0,0; 0,0,1; 0,1,0; 1,1,1]\ncells = num2cell(data,2)\ncellfun(@sum,cells)</code></pre>\n\n<p>Next we moved on to look at variable-length argument list. In this section of the lab we used <a href=\"https://octave.org/doc/v4.2.0/Variable_002dlength-Argument-Lists.html\">varargin</a> to complete the function that was given.</p>\n\n<p>Then we looked at the <strong>K nearest neighbour</strong> section. In this section we had to fill in the function so it returns the row of indices of the k closest rows of <code>data</code> to <code>v</code>. Then we called the following lines of code from the command window to time our nearest neighbour function.</p>\n\n<pre><code>load training\nload testing\ntimeit(1000,@nearest,testing(1,:), 3, training);</code></pre>\n\n<p>Then we looked at <strong>using rowfun</strong>. In this section we had to use the find function to complete a loop free version of the [K nearest neighbour] problem. Then we added the following <code>timeit</code> call to compare the time to the other k nearest neighbour solutions.</p>\n\n<pre><code>timeit(10,@rowknn,3,training,testing);</code></pre>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<p>In this lab there were a lot of new concepts to me. One of the new topics was <strong>variable-length argument list</strong>. It was an interesting concept because some of the old ideas from previous topics were used as reference. We learnt that the function <code>varargin</code> provides similar functionality to the <code>.rest</code> argument in racket or the <code>...rest</code> function in JavaScript. This made it a bit easier to understand the main concept of the function.</p>\n\n<p>The other new concept was the <strong>k nearest neighbour</strong> algorithm. Here we read a bit about the <a href=\"https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm\">k nearest neighbour</a> to better understand it. This was a neat concept because it was different compared to the other topics we have been looking at. It was also easier to understand this concept because I could easily rely it to a real world scenario.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>In this lab there were no concepts that were familiar to me from other courses or my own knowledge. There were topics that I should’ve known, like the linear algebra stuff since I did take a previous class on it.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>I did not learn any new skills. I did however practice my octave programming skills and my debugging skills. I practiced my octave programming skills because the whole lab was working in octave. I also improved my debugging skills because when I find out what caused my errors through the lab.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found this lab to be particularly difficult because there was a lot of concepts that we should know from the course <strong>linear algebra</strong>. This made it difficult because it&rsquo;s been a while since I took linear algebra. This meant in the lab I was trying to relearn linear algebra and the new material at the same time.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>First topic we looked at in the lab was cell arrays. In this section we looked at using the cell arrays as a list of vectors. Below is the few commands we used to get a better understanding on how it works.</p>\n\n<pre><code>data = [0,0,0; 0,0,1; 0,1,0; 1,1,1]\ncells = num2cell(data,2)\ncellfun(@sum,cells)</code></pre>\n\n<p>Next we moved on to look at variable-length argument list. In this section of the lab we used <a href=\"https://octave.org/doc/v4.2.0/Variable_002dlength-Argument-Lists.html\">varargin</a> to complete the function that was given.</p>\n\n<p>Then we looked at the <strong>K nearest neighbour</strong> section. In this section we had to fill in the function so it returns the row of indices of the k closest rows of <code>data</code> to <code>v</code>. Then we called the following lines of code from the command window to time our nearest neighbour function.</p>\n\n<pre><code>load training\nload testing\ntimeit(1000,@nearest,testing(1,:), 3, training);</code></pre>\n\n<p>Then we looked at <strong>using rowfun</strong>. In this section we had to use the find function to complete a loop free version of the [K nearest neighbour] problem. Then we added the following <code>timeit</code> call to compare the time to the other k nearest neighbour solutions.</p>\n\n<pre><code>timeit(10,@rowknn,3,training,testing);</code></pre>")) ((p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/_src/posts/2019-10-31-lab-16.md" . unix) f post (u . "Lab 16") (? . 22) 1574440776 (p+ #"/home/cwendlandt/Documents/UNB/Courses/Fall2019/cs2613/journal/2019/10/lab-16.html" . unix) (u . "/2019/10/lab-16.html") (u . "2019-10-31T12:02:58") (? . 21) (? . 5) (c (u . "Author: Cassandra Wendlandt-Bloodsworth")) (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"map\">Map</h3>\n\n<p>Today we talked what <a href=\"https://docs.python.org/3/library/functions.html#map\">map</a> does in python. It acts similar to the map we saw in racket which made it easier to understand. It was a little confusing to understand at the beginning but the <a href=\"https://www.w3schools.com/python/ref_func_map.asp\">following link</a> really helped to understand it a lot more.</p>\n\n<h3 id=\"format\">Format</h3>\n\n<p>The other new concept we covered today in the lab was <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\">format strings</a>. This concept seemed a lot similar to the format in c. This was helpful to gain a better understanding of what was going on.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>Most of this lab was familiar to me because I have already worked with it in a previous class. I also worked with a lot of the topics in the lab for the assignment as well. This was helpful because I picked up on some tips I can use in the assignment to improve my code.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>During the lab I did not practice any new skills but I did improve on skills that I already have. The first skill I improved on was my python coding skills. This skill was improved because the whole lab was programming in python. The next skill I improved on was my problem solving skills. I improved this skill because a good chunk of the lab was working by yourself.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found that the lab was pretty easy overall. There were some spots that I found hard to get like the map question. The rest I had a pretty good understanding before the lab so it made it easy to follow along and gain more from the lab as well.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>During this lab we started by looking at <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/comprehensions.html#listcomprehension\">list comprehensions</a>. First we had to fill in the blank of the missing code.Then we moved onto <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/comprehensions.html#dictionarycomprehension\">dictionary comprehensions</a> . This section was fairly familiar with since I used in the assignment already. In this part of the lab we had to turn a list into a dictionary. The line of code I used to complete this was <code>{i+1: lst[i] for i in range ( 0 , len (lst))}</code> but then after having a discussion I found a more concise way of writing the same line. The better way to write this is <code>{i+1: lst[i] for i in range ( len (lst))}</code>.</p>") #f (u . "\n<h2 id=\"what-new-concepts-if-any-did-you-learn-about-in-this-lab\">What new concepts (if any) did you learn about in this lab?</h2>\n\n<h3 id=\"map\">Map</h3>\n\n<p>Today we talked what <a href=\"https://docs.python.org/3/library/functions.html#map\">map</a> does in python. It acts similar to the map we saw in racket which made it easier to understand. It was a little confusing to understand at the beginning but the <a href=\"https://www.w3schools.com/python/ref_func_map.asp\">following link</a> really helped to understand it a lot more.</p>\n\n<h3 id=\"format\">Format</h3>\n\n<p>The other new concept we covered today in the lab was <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\">format strings</a>. This concept seemed a lot similar to the format in c. This was helpful to gain a better understanding of what was going on.</p>\n\n<h2 id=\"what-concepts-are-familiar-from-other-courses-or-from-your-own-knowledge\">What concepts are familiar from other courses or from your own knowledge?</h2>\n\n<p>Most of this lab was familiar to me because I have already worked with it in a previous class. I also worked with a lot of the topics in the lab for the assignment as well. This was helpful because I picked up on some tips I can use in the assignment to improve my code.</p>\n\n<h2 id=\"what-new-skills-did-you-practice\">What new skills did you practice?</h2>\n\n<p>During the lab I did not practice any new skills but I did improve on skills that I already have. The first skill I improved on was my python coding skills. This skill was improved because the whole lab was programming in python. The next skill I improved on was my problem solving skills. I improved this skill because a good chunk of the lab was working by yourself.</p>\n\n<h2 id=\"what-specific-details-did-you-find-surprising-interesting-confusing-difficult-or-otherwise-important\">What specific details did you find surprising, interesting, confusing, difficult, or otherwise important?</h2>\n\n<p>I found that the lab was pretty easy overall. There were some spots that I found hard to get like the map question. The rest I had a pretty good understanding before the lab so it made it easy to follow along and gain more from the lab as well.</p>\n\n<h2 id=\"what-explicit-tasks-eg-reading-were-you-given-during-this-lab\">What explicit tasks (e.g. reading) were you given during this lab?</h2>\n\n<p>During this lab we started by looking at <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/comprehensions.html#listcomprehension\">list comprehensions</a>. First we had to fill in the blank of the missing code.Then we moved onto <a href=\"http://www.cs.unb.ca/~bremner/teaching/cs2613/books/diveintopython3/comprehensions.html#dictionarycomprehension\">dictionary comprehensions</a> . This section was fairly familiar with since I used in the assignment already. In this part of the lab we had to turn a list into a dictionary. The line of code I used to complete this was <code>{i+1: lst[i] for i in range ( 0 , len (lst))}</code> but then after having a discussion I found a more concise way of writing the same line. The better way to write this is <code>{i+1: lst[i] for i in range ( len (lst))}</code>.</p>"))))